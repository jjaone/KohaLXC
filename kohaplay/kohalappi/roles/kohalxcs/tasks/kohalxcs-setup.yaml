---
# File: roles/kohalxcs/tasks/kohalxcs-setup.yaml
# #############################################################################
# Code is part of the KohaLXC/kohatools Ansible/Bash tooling environment
# for Koha/ILS-development, deployment & database conversion/migration tasks.
# Author: Jukka Aaltonen, Koha-Lappi, Rovaniemi City Library, Lapland/Finland.
# License: GNU General Public License version 3.
# 
# Description: setup tasks of Koha-related LXCs for dev/mdb/web/data envs
# - setup Koha-related LXCs environments in playbook inventories
# - ensure availability of all required distro packages and Perl-modules
# - 
# ##############################################################################

- debug: var=inventory_hostname,hostnode_environment,kohalxc_tooldir,kohalxcs_kohalxc_tooldir

## Read ansible_facts from target ansible localized folder: /etc/ansible/facts.d
- name: setup - Read LXC env facts (ansible_local/{{inventory_hostname}}).lxc_group
  #become:
  setup: >
    fact_path="{{ kohalxcs_kohalxc_tooldir }}/conf.d/env.data/lxcs/{{inventory_hostname}}/config"
    filter="ansible_local"
- debug: var=ansible_local

## Set this LXC-environment enablements based on above facts
- name: setup - Set the LXC-environments based on local facts (if any)
  vars:
    #lxc_name: "{{ inventory_hostname.split('.')[0] | d('default') }}"
    lxcg: "{{ansible_local[inventory_hostname.split('.')[0] | d('default')].lxc_group}}"
    lxcn: "{{ansible_local[inventory_hostname.split('.')[0] | d('default')].lxc_net|d()}}"
  set_fact:
    kohalxcs_devenv_enabled: "{{ lxcg.devenv_enabled | d(false) }}"
    kohalxcs_dataenv_enabled: "{{ lxcg.dataenv_enabled | d(false) }}"
    kohalxcs_mmtenv_enabled: "{{ lxcg.mmtenv_enabled | d(false) }}"
    kohalxcs_ppmmtenv_enabled: "{{ lxcg.ppmmtenv_enabled | d(false) }}"
    kohalxcs_origommtenv_enabled: "{{ lxcg.origommtenv_enabld | d(false) }}"
    kohalxcs_mdbenv_enabled: "{{ lxcg.mdbenv_enabled | d(false) }}"
    kohalxcs_kohaenv_enabled: "{{ lxcg.kohaenv_enabled | d(false) }}"
    kohalxcs_kohaenv_srvname: "{{ lxcn.kohaenv_srvname | d() }}" 
#- debug: var=kohalxcs_devenv_enabled,kohalxcs_dataenv_enabled,kohalxcs_mmtenv_enabled,kohalxcs_ppmmtenv_enabled,kohalxcs_origommtenv_enabled,kohalxcs_mdbvenv_enabled,kohalxcs_kohaenv_enabled

#- debug: var=kohalxcs_devenv_pckgs,kohalxcs_dataenv_pckgs
## Ensure {dev,data}env.* pckgs are installed (if respective env is enabled)
- name: devenv/dataenv - Ensure dev + data environment packages are installed
  become: yes
  apt: >
    name="{{ item }}"
    update_cache="yes"
    state="present"
    autoremove="yes"
  with_flattened:
    - "{{ (kohalxcs_devenv_enabled) | ternary(kohalxcs_devenv_pckgs, '') }}"
    - "{{ (kohalxcs_dataenv_enabled) | ternary(kohalxcs_dataenv_pckgs, '' ) }}"
  when:
    - kohalxcs_devenv_enabled or kohalxcs_dataenv_enabled
    - item is defined and item != ''

## Ensure koha-group exists in the lXC
- name: setup - Ensure we have a koha-user group
  become: yes
  group: >
    name={{ kohalxc_kohagrp_name }}
    gid={{ kohalxc_kohagrp_id }}
    state=present
  when:
    - kohalxc_kohagrp_name is defined
    - kohalxc_kohagrp_id is defined

## Ensure kohaoper (default: 'ubuntu') belongs to koha-group and has ssh-keys
- name: setup - Ensure LXC-user (ansible_user) has ssh-keys and belongs to koha-group
  become: yes
  user: >
    name="{{ ansible_user }}"
    uid="{{ kohalxc_operid }}"
    groups="{{ kohalxc_kohagrp_name | d(hostnode_kohagrp_name) }}"
    append="yes"
    generate_ssh_key="yes"
    comment="Koha/LXC kohaoper user"
  when:
    - kohalxc_operid is defined
    - kohalxc_kohagrp_name is defined

#- debug: var=ansible_user,kohalxc_operuser,kohalxc_operid,kohalxc_kohagrp_id
## Ensure kohalxc_operuser(khaoper/HOME) has required dirs
- name: setup - Ensure LXC-user (ansible_user) has dirs for scripts and logs
  file: >
    path="/home/{{ ansible_user }}/{{ item }}"
    state="directory"
  with_items:
    - bin
    - log

## Push/copy 'run_conversion' script to ConversionTools
# - TODO: mode="u+rwx,g+rx,o-rwx"
- name: mmtenv - Push containerized conversion main script to ConversionTools
  #become: yes
  template: >
    src="files/dataenv/run_conversion-perl_import_pl.sh.j2"
    dest="{{ kohalxcs_kohalxc_tooldir }}/ppmmtws/ConversionTools/run_conversion.sh"
    mode="u+x,g+rx"
    backup="no"
  when:
    - kohalxcs_ppmmtenv_enabled

## Ensure 'run_conversion' script is symlinked to container $HOME/bin
- name: mmtenv - Symlink conversion main script in container HOME/bin
  file: >
    src="{{ kohalxcs_kohalxc_tooldir }}/ppmmtws/ConversionTools/run_conversion.sh"
    dest="{{ '/home/'~ansible_user~'/bin/run_conversion' }}"
    state="link"
    force="yes"
  when:
    - kohalxcs_ppmmtenv_enabled

- debug: var=kohalxcs_ppmmtenv_enabled,kohalxcs_ppmmtenv_importchains,kohalxcs_ppmmtenv_polling
## Run conversion: main script
# - script might run very long time, poll every half a minute, timeout in seconds
- name: data+ppmmtenv - Start main conversion script using 'lxc_config' (max {{ (kohalxcs_ppmmtenv_timeout | d(3600) | int) // 3600 }} hours)
  environment:
    KOHALXC_TOOLDIR: "{{ kohalxcs_kohalxc_tooldir }}"
    KOHALXC_DATADIR: "{{ '/home/'~ansible_user~'/KohaLappi/kohadata' }}"
  shell: |
    ls -l ~/bin/run_conversion;
    echo && echo "== START OF PP/MMT CONVERSION.." && echo;
    $HOME/bin/run_conversion lxc_config.xml {{ kohalxcs_ppmmtenv_importchains }} > /dev/null;
    head -35 $KOHALXC_TOOLDIR/ppmmtws/PerlMMT/logs/import_all.log;
    echo && echo "== ..CONVERTING.." && echo;
  args:
    chdir: "{{ '/home/'~ansible_user }}"
    creates: ~/bin/.run_conversion.finished
  async: "{{ kohalxcs_ppmmtenv_timeout | d(3600) }}"
  poll: "{{ kohalxcs_ppmmtenv_polling | d(0) }}"
  register: job_runconversion
  when:
    - kohalxcs_dataenv_enabled
    - kohalxcs_ppmmtenv_enabled
    - kohalxcs_ppmmtenv_importchains != ''

## Run conversion: check whether we are finished
- name: data+ppmmtenv - Check whether conversion run has finisihed..
  async_status: jid={{ job_runconversion.ansible_job_id }}
  register: cmd_runconversion_result
  until: cmd_runconversion_result.finished
  retries: "{{ kohalxcs_ppmmtenv_checkfinished | d(60) }}"
  delay: "{{ kohalxcs_ppmmtenv_checkdelay | d(5) }}"
  when:
    - kohalxcs_dataenv_enabled
    - kohalxcs_ppmmtenv_enabled
    - kohalxcs_ppmmtenv_importchains != ''

#- debug: var=cmd_runconversion_result,kohalxcs_kohalxc_tooldir
## Run conversion: finish the run (split/show log per ImportChains
- name: data+ppmmtenv - Finish conversion run (split/show log by import-chains)
  environment:
    KOHALXC_TOOLDIR: "{{ kohalxcs_kohalxc_tooldir }}"
    KOHALXC_DATADIR: "{{ '/home/'~ansible_user~'/KohaLappi/kohadata' }}"
  shell: |
    tail -30 $KOHALXC_TOOLDIR/ppmmtws/PerlMMT/logs/import_all.log
    echo && echo "== END OF PP/MMT CONVERSION." && echo
    (cd $KOHALXC_DATADIR/source.0/logs && pwd && ls -l && echo)
    (cd $KOHALXC_DATADIR/source.0/target && pwd && ls -Csh && echo)
  when:
    - kohalxcs_dataenv_enabled
    - kohalxcs_ppmmtenv_enabled
    - kohalxcs_ppmmtenv_importchains != ''

## Make Staff Accounts for PP//MMT-Patrons
- name: data+ppmmtenv - Make staff accounts for PatronsImportChain-conversion
  environment:
    KOHALXC_TOOLDIR: "{{ kohalxcs_kohalxc_tooldir }}"
    KOHALXC_DATADIR: "{{ '/home/'~ansible_user~'/KohaLappi/kohadata' }}"
  shell: |
    echo && ./makeStaffAccounts.sh > /dev/null;
    #cat $KOHALXC_DATADIR/source.0/target/Patrons/staffaccounts/givenusernames.txt;
  args:
    executable: /bin/bash
    chdir: "{{ kohalxcs_kohalxc_tooldir }}/ppmmtws/ConversionTools"
    #creates: $KOHALXC_DATADIR/source.o/target/Patrons/staffaccounts/givenusernames.txt;
  register: cmd_staffaccounts
  when:
    - kohalxcs_dataenv_enabled
    - kohalxcs_ppmmtenv_enabled
    - ('patrons' in kohalxcs_ppmmtenv_importchains)

## Run conversion: build '{Patrons,Biblios,Items,Holds,Checkouts,Fines}.migrateme' files
- name: data+ppmmt - Build '*.migrateme' files for insertion to Koha
  environment:
    KOHALXC_TOOLDIR: "{{ kohalxcs_kohalxc_tooldir }}"
    KOHALXC_DATADIR: "{{ '/home/'~ansible_user~'/KohaLappi/kohadata' }}"
  shell: |
    ls -1sh && for d in Patrons Biblios Items Holds Checkouts Fines
    do
       ([[ -d $d ]] && cd $d && echo && echo "== $d: $(pwd)" && rm -f ${d,,}.migrateme && cat 01_${d,,}* > ${d,,}.migrateme && find */ -maxdepth 1 -name '*.migrateme' -exec cp -vp {} . \; 2>/dev/null; ls -Csh --format=horizontal | grep -v "total" && echo -n "== $d lines: " && wc -l ${d,,}.migrateme || echo);
    done
  args:
    executable: /bin/bash
    chdir: "{{ '/home/'~ansible_user~'/'~kohalxcs_organization|d(kohalxc_organization)~'/kohadata' }}/source.0/target"
  when:
    - kohalxcs_dataenv_enabled
    - kohalxcs_ppmmtenv_enabled
    - kohalxcs_ppmmtenv_importchains != ''

## Database: full dump of the db
#- name: Dump all databases to hostname.sql
#  mysql_db:
#    state: dump
#    name: all
#    login_user: "{{ kohalxc_mdbenv_kohauser }}"
#    login_password: "{{ kohalxc_mdbenv_kohauser }}"
#    target: /tmp/mdbenv-dump_{{ inventory_hostname }}_all-ddmmyyy.sql

## Database/status: 'patrons' and staffaccounts
# - USE {{ kohalxcs_mdbenv_kohadb | d('kohadata') }}
# - SELECT userid,borrowernumber,cardnumber,branchcode,categorycode FROM borrowers WHERE categorycode <> 'S';
# - SELECT userid,borrowernumber,cardnumber,branchcode,categorycode FROM borrowers WHERE categorycode = 'S';
- name: Show status of converted Patrons and generated Staff accounts, if any
  become: yes
  shell: |
    pwd && ls -1sh Patrons && echo
    [[ -f Patrons/patrons.migrateme ]] && mysql -h localhost -u {{ kohalxcs_mdbenv_kohauser | d('koha') }} --password={{ kohalxcs_mdbenv_kohapass }} {{ kohalxcs_mdbenv_kohadb | d('kohadata') }} -e 'SELECT userid,borrowernumber,cardnumber,branchcode,categorycode FROM borrowers LIMIT 10;'
    [[ -f Patrons/staffaccounts.migrateme ]] && mysql -h localhost -u {{ kohalxcs_mdbenv_kohauser | d('koha') }} --password="{{ kohalxcs_mdbenv_kohapass }}" {{ kohalxcs_mdbenv_kohadb | d('kohadata') }} -e 'SELECT userid,borrowernumber,cardnumber,branchcode,categorycode FROM borrowers WHERE categorycode = "S" LIMIT 10;'
    exit 0
  args:
    executable: /bin/bash
    chdir: /home/{{ansible_user}}/{{kohalxc_organization}}/kohadata/target
  when:
    - kohalxcs_kohaenv_enabled
    - kohalxcs_mdbenv_enabled
    - ('patrons' in kohalxcs_mmtenv_migrateme)

## Migrate: 'patrons' (and staffaccounts)
# TODO: What is the best way to ensure that no Patron related data exists?
# - DELETE FROM borrowers WHERE borrowernumber <> 1;
- name: Migrate converted Patrons and Staff accounts
  become: yes
  shell: |
    pwd && ls -la Patrons
    head -3 Patrons/patrons.migrateme && head -3 Patrons/staffaccounts.migrateme
    [[ -f Patrons/patrons.migrateme ]] && su -l koha -c "bulkPatronImport.pl --file /home/{{ansible_user}}/{{kohalxc_organization}}/kohadata/target/Patrons/patrons.migrateme --deduplicate"
    [[ -f Patrons/staffaccounts.migrateme ]] && su -l koha -c "bulkPatronImport.pl --file /home/{{ansible_user}}/{{kohalxc_organization}}/kohadata/target/Patrons/staffaccounts.migrateme --deduplicate"
    #su -l koha -c "bulkPatronImport.pl --help"
    exit 0
  args:
    executable: /bin/bash
    chdir: /home/{{ansible_user}}/{{kohalxc_organization}}/kohadata/target
    #creates: Patrons/.patrons.migrateme
  when:
    - kohalxcs_kohaenv_enabled
    - kohalxcs_mmtenv_enabled
    - ('patrons' in kohalxcs_mmtenv_migrateme)
    - ('patrons' in kohalxcs_ppmmtenv_importchains)

## Migrate: 'biblios'
- name: Migrate converted Biblios
  become: yes
  shell: |
    pwd && ls -1sh Biblios && echo
  args:
    executable: /bin/bash
    chdir: /home/{{ansible_user}}/{{kohalxc_organization}}/kohadata/target
  when:
    - kohalxcs_kohaenv_enabled
    - kohalxcs_mmtenv_enabled
    - ('biblios' in kohalxcs_mmtenv_migrateme)
    - ('biblios' in kohalxcs_ppmmtenv_importchains)

- debug: var=kohalxcs_kohaenv_enabled,kohalxcs_ppmmtenv_enabled,kohalxcs_mmtenv_enabled,kohalxcs_mmtenv_migrateme
## Zebra: rebuild index
# - su -l koha -c "/usr/share/koha/bin/migration_tools/rebuild_zebra.pl -b -r -v -x --offset 0 --length 20000"
- name: koha+mmt - Rebuild Zebra index for Koha ({{ (kohalxcs_ppmmtenv_timeout | d(7200) | int) // 3600 }} hours)
  become: yes
  #become_user: koha
  shell: |
    pwd && echo "== ansible-kohalxc: Rebuild and Start Zebra index for Koha ==";
    service koha-zebra-daemon stop
    ln -s -f /usr/share/koha/bin/koha-zebra-ctl.sh /etc/init.d/koha-zebra-daemon
    update-rc.d koha-zebra-daemon defaults
    service koha-zebra-daemon start
    chown koha -R /var/lib/koha
    su -l koha -c "/usr/share/koha/bin/migration_tools/rebuild_zebra.pl -b -r -v -x"
    echo && echo "== ansible-kohalxc: Zebra index rebuild done."
  args:
    executable: /bin/bash
    chdir: /home/{{ansible_user}}/{{kohalxc_organization}}/kohadata/target
  async: "{{ kohalxcs_ppmmtenv_timeout | d(7200) }}"
  poll: "{{ kohalxcs_ppmmtenv_polling | d(0) }}"
  register: job_rebuildidx
  when:
    - kohalxcs_kohaenv_enabled
    - kohalxcs_mmtenv_enabled
    - ('biblios' in kohalxcs_mmtenv_migrateme)

## Zebra rebuild: check whether we are finished
- name: koha+mmt - Check whether Zebra index building is on ({{ (kohalxcs_ppmmtenv_timeout | d(7200) | int) // 60 }} mins)
  become: yes
  #become_user: koha
  async_status: jid={{ job_rebuildidx.ansible_job_id }}
  register: cmd_rebuildidx_result
  until: cmd_rebuildidx_result.finished
  retries: "{{ (kohalxcs_ppmmtenv_timeout | d(7200) | int ) // 60 }}"
  #retries: "{{ kohalxcs_ppmmtenv_checkfinished | d(120) }}"
  delay: "{{ kohalxcs_ppmmtenv_checkdelay | d(60) }}"
  when:
    - kohalxcs_kohaenv_enabled
    - kohalxcs_mmtenv_enabled
    - ('biblios' in kohalxcs_mmtenv_migrateme)

## Koha/webapp-setup after this point => should be moved to kohaenv-setup.yaml ##

- debug: var=hostnode_kohaenv_srvname,kohalxcs_kohaenv_enabled,kohalxcs_kohaenv_srvname,kohalxcs_kohaenv_https,kohalxcs_kohaenv_sslle,kohalxc_organization
## Install LetsEncrypt/certbot client for SSL-certificates
- name: Install LetsEncrypt from Git for SSL-certificate generation
  become: yes
  shell: mkdir -p /opt/letsencrypt && git clone https://github.com/letsencrypt/letsencrypt /opt/letsencrypt &% cd /etc/letsencrypt && ./letsencrypt-auto certonly --email {{ kohalxcs_kohaenv_srvadmin | d() }} --apache -d {{ kohalxcs_kohaenv_srvname }}
  args:
    chdir: /opt
    executable: /bin/bash
  when:
    - kohalxcs_kohaenv_enabled
    - kohalxcs_kohaenv_https
    - kohalxcs_kohaenv_sslle

## Configure Koha(Apache2) OPAC and Intranet for https
- name: Generate Koha/Apache2 https config (only if 'kohaenv_srvname' is set)
  become: yes
  #become_user: koha
  template: >
    src="files/kohaenv/{{ kohalxc_organization|lower }}-https.conf.j2"
    dest="/etc/koha/{{ kohalxc_organization|lower }}-https.conf"
    mode="u=rw,g=r,o=r"
    owner="koha"
    group="koha"
    backup="yes"
  when:
    - kohalxcs_kohaenv_enabled
    - kohalxc_organization is defined
    - kohalxcs_kohaenv_https and kohalxcs_kohaenv_srvname

- name: Make available our SSL-site configuration in Koha/Apache2
  become: yes
  shell: ln -s -f /etc/koha/{{ kohalxc_organization|lower }}-https.conf /etc/apache2/sites-available/koha-ssl.conf
  #shell: service apache stop && a2enmod ssl && a2dissite koha.conf && ln -s -f /etc/koha/{{ kohalxc_organization | lower }}-https.conf /etc/apache2/sites-enabled/koha-ssl.conf && service apache2 restart
  when:
  - kohalxcs_kohaenv_enabled
  - kohalxc_organization is defined
  - kohalxcs_kohaenv_https and kohalxcs_kohaenv_srvname

## Generate SSL-certificate (self-signed)
- name: Generate server.key and self-signed SSL-certificate for Koha/Apache2
  become: yes
  shell: mkdir -p /etc/apache2/ssl && openssl genrsa -des3 -passout pass:x -out /tmp/server.pass.key 2048 && openssl rsa -passin pass:x -in /tmp/server.pass.key -out /tmp/server.key && rm -f /tmp/server.pass.key && openssl req -new -subj "/C=FI/ST={{ hostnode_environment | d('local') }}/L={{ kohalxc_organization }}/O=Lapin kirjasto/OU={{ kohalxc_organization }} ({{ hostnode_environment | d('local') }})/CN={{ kohalxcs_kohaenv_srvname | d('localhost') }}" -key /tmp/server.key -out /tmp/server.csr && openssl x509 -req -sha256 -days 365 -in /tmp/server.csr -signkey /tmp/server.key -out /etc/apache2/ssl/server.crt && cp -vpf /tmp/server.key /etc/apache2/ssl/. && rm -f /tmp/server.*
  args:
    executable: /bin/bash
    chdir: /tmp
    #creates: /etc/apache2/ssl/server.crt
  when:
    - kohalxcs_kohaenv_enabled
    - kohalxc_organization is defined
    - kohalxcs_kohaenv_https and kohalxcs_kohaenv_srvname

- name: Enable SSL (switch to https) restart Koha/Apache2
  become: yes
  shell: service apache2 stop && a2dissite koha.conf && a2enmod ssl && a2ensite koha-ssl.conf && service apache2 restart
  when:
  - kohalxcs_kohaenv_enabled
  - kohalxcs_kohaenv_https and kohalxcs_kohaenv_srvname

## !! For debug/dev FAIL here on purpose..!! ##
#- fail:
