#!/bin/bash

# KohaLXC/kohatools (data+mmtenv): PP/MMT-configuration
# file: $KOHALXC_TOOLDIR/ppmmtws/ConversionTools/run_conversion-perl_import.pl.sh
{{ ansible_managed | comment }}

## Script name
PROGNAME="run_conversion"

## KOHALXC environment
# - Check that KOHALXC_TOOLDIR is set and directory exists..
[[ -z "$KOHALXC_TOOLDIR" ]] || [[ ! -e "$KOHALXC_TOOLDIR" ]] &&
    echo "== No KOHALXC_TOOLDIR set or dir does not exist ..exiting" && exit 1
# - Check that KOHALXC_DATADIR is set and directory exists..
[[ -z "$KOHALXC_DATADIR" ]] || [[ ! -e "$KOHALXC_DATADIR" ]] &&
    echo "== No KOHALXC_DATADIR set or dir does not exist ..exiting" && exit 1

## Directories: 
PPMMT_DIR="${KOHALXC_TOOLDIR}/ppmmtws"
#PPMMT_DIR="$HOME/kohatools/ppmmtws"
#: -'source.0' to use "fixed sources" as data
DATA_DIR="${KOHALXC_DATADIR}/source.0"
#DATA_DIR="$HOME/kohadata/source"
LOGS_DIR="$DATA_DIR/logs"

## PP/MMT-configuration:
DEFAULT_CONFIG="default_config.xml"
HOST_CONFIG="host_config.xml"
LXC_CONFIG="lxc_config.xml"
# Which config.xml to use: LXC_CONFIG (default)
CONFIG_XML="$LXC_CONFIG"
[[ -n "$1" ]] && CONFIG_XML=$1
# Which ImportChains to run: "all" (default)
IMPORTCHAINS="all"
[[ -n "$2" ]] && IMPORTCHAINS="$2"

## Show configuration: verbose
echo "PPMMT_DIR=$PPMMT_DIR"
echo "DATA_DIR=$DATA_DIR"
echo "LOGS_DIR=$LOGS_DIR"
echo "CONFIG_XML=$CONFIG_XML"
echo "IMPORTCHAINS=$IMPORTCHAINS"

# Check that PP/MMT main config exists..
[[ ! -e "${PPMMT_DIR}/${CONFIG_XML}" ]] && 
    echo "== No config file found..exiting" && exit 1

## Do the stuff ##
STARTSTAMP=`date +%Y%m%d_%H%M`

## Cleanup for traping kills/terminations of the script
function onterminated() {
    PGID=$(ps -o pgid= $$ | grep -o [0-9]*)
    echo && echo "== $PROGNAME ($STARSTAMP): killing process group: $PGID.."
    setsid kill -- -$PGID

    rm -f $LOGS_DIR/conversion-$STARTSTAMP/*
    rmdir $LOGS_DIR/conversion-$STARTSTAMP
    #rm -f $LOGS_DIR/conversion-last
    TERMSTAMP=`date +%Y%m%d_%H%M`
    echo && echo "== $PROGNAME ($STARTSTAMP): terminated on $TERMSTAMP"
    exit
}

function cleanPreviousRun() {
   NOWSTAMP=`date +%Y%m%d_%H%M`
   echo && echo "== $PROGNAME ($NOWSTAMP): clean previous run artifacts (if any).."
   PID=$(ps axjf | grep -A2 "START OF PP/MMT CONVERSION" | grep -v grep | grep "perl import.pl" | grep -v grep | awk '{print $2}')
   [[ -n "$PID" ]] && (
       echo && echo "== $PROGNAME ($NOWSTAMP): killing 'perl import.pl ($PID)'.."
       kill $PID
   )
}

## Trap for cleanup if we are terminated in the middle of conversion
trap onterminated SIGHUP SIGINT SIGTERM

## Indicate that we are starting up
echo && echo "== $PROGNAME ($STARTSTAMP) for:$IMPORTCHAINS"

## Clean previous run process artifacts..
# - kill 'perl import.pl' and the trap should handle the rest
cleanPreviousRun;

## Make required directories (and empty run log directory)
cd $PPMMT_DIR/PerlMMT && mkdir -vp logs && pwd && rm -f -r logs/*
#cd $PPMMT_DIR/PerlMMT && mkdir -vp logs && pwd && rm -f logs/*.log && mkdir -v logs/conversion-$STARTSTAMP
mkdir -vp $LOGS_DIR/conversion-$STARTSTAMP && pwd && ls -l

## Run the PP/MMT
cx=$CONFIG_XML
ic=$IMPORTCHAINS
perl import.pl ../${cx:-lxc_config.xml} 2>&1 | tee logs/import_${ic:-all}.log
#perl import.pl ../$CONFIG_XML |& tee logs/conversion-$STARTSTAMP/import_all.log

## Save logs
echo && cp -vpr logs/* $LOGS_DIR/conversion-$STARTSTAMP/.

## Make a symlink to last finsihed conversion in LOGS_DIR
(cd $LOGS_DIR && ln -s -f -T conversion-$STARTSTAMP conversion-last && ls -l)

## Show what we got
echo && ls -l $LOGS_DIR/conversion-$STARTSTAMP && head -15 $LOGS_DIR/conversion-$STARTSTAMP/import_*.log

## Check  whhich chains were actually succesfully run?
#IMPORTCHAINS="Patrons Biblios Items"

## Clean exit
ENDSTAMP=`date +%Y%m%d_%H%M`
echo && echo "== $PROGNAME ($ENDSTAMP) done for:${IMPORTCHAINS:-all}"

exit 0
