---
# File: roles/hostnode/defaults/main.yml
# #############################################################################
# Code is part of the KohaLXC/kohatools Ansible/Bash tooling environment
# for Koha/ILS-development, deployment & database conversion/migration tasks.
# Author: Jukka Aaltonen, Koha-Lappi, Rovaniemi City Library, Lapland/Finland.
# License: GNU General Public License version 3.
#
# Description: define defaults for all variables used in this role
# - General, KohalXC-tooling, Server-updates, Security, LVM, ZFS, LXCs
# - vars should be named like 'hostnode_var1' etc..
# - vars used in templates for config files should be at target OS defaults
#
# See also:
# - roles/hostnode/vars/main.yaml ('constantized' vars..)
# - <inventory>/group_vars/{all/}{main,vault}.yaml (inventory vars..)
# - <playbooks>/group_vars/{all,hostnode}/{main,vault}.yaml (top-level)
# #############################################################################

## Just to test/debug the inheritance in ansible playbooks..
hostnode_testvar: roles_hostnode_defaults_main.yaml

## #########################
## General: facts & handlers
## #########################
# Facts gathering: False/True
gather_facts: False
# Force all handlers always (also in case play fails etc):
#force_handlers: false
# Local/management user home directory
#local_home: "{{ lookup('env', 'HOME') }}"

## ############################
## Server/Host: KohaLXC tooling
## ############################
# - defaults in 'roles/common/defaults/main.yaml'
# - override these in inventory/group+host_vars
## KohaLXC: install dir
kohalxc_install: "/home/{{ansible_user}}/Works"
## KohaLXC: works
hostnode_kohalxc_works: "{{ kohalxc_install }}"
## KohaLXC: rootdir
hostnode_kohalxc_rootdir: "{{ hostnode_kohalxc_works }}/KohaLXC"
## KohaLXC: tooldir
hostnode_kohalxc_tooldir: "{{ hostnode_kohalxc_rootdir }}/kohatools"
## KohaLXC: organization
hostnode_kohalxc_organization: "{{ kohalxc_organization }}"
## KohaLXC: setupdir (LXCs are defined here)
hostnode_kohalxc_setupdir: "{{ hostnode_kohalxc_works }}/{{ hostnode_kohalxc_organization }}/kohalxc"

## ############################
## KohaLXC/development (devenv)
## ############################
## KohaLXC/devenv: role default
hostnode_devenv_enabled: true
# Environment main configuration directory: Shell/kohasetup + Ansible/plays
hostnode_devenv_confdir: "{{ hostnode_kohalxc_tooldir }}/conf.d/env.dev"

## ############################
## KohaLXC/server/host (srvenv)
## ############################
## KohaLXC/srvenv: role default
hostnode_srvenv_enabled: true
# Packages needed for srvenv setup/config/tools
hostnode_srvenv_pckgs:
  - sshfs
  - sshpass
  - iptables
  - iptables-persistent
  - bridge-utils
  - mailutils
# Environment main configuration directory: Shell/kohasetup + Ansible/plays
hostnode_srvenv_confdir: "{{ hostnode_kohalxc_tooldir }}/conf.d/env.srv"

## #########################
## KohaLXC/dataenv: datasets
## #########################
# Enablement: (data for MMT)
hostnode_dataenv_enabled: true
# Packages needed for dataenv setup/config/tools
hostnode_dataenv_pckgs:
# Environment main configuration directory: Shell/kohasetup + Ansible/plays
hostnode_dataenv_confdir: "{{ hostnode_kohalxc_tooldir }}/conf.d/env.data"
# KohaLXC/dataenv: datadir
hostnode_dataenv_datadir: "{{ hostnode_kohalxc_works }}/{{ hostnode_kohalxc_organization }}/kohadata"
# KohaLXC/dataenv: datasets name(s) for MMT-migration:
hostnode_dataenv_dataset: "{{ kohalxc_dataset }}"
hostnode_dataenv_datasets:
# KohaLXC/dataenv: default dataset with latest fix source dir(s) for MMT
hostnode_dataenv_fixssource:
  - { name: "default", src: "source" }

## #########################################################################
## KohaLXC/MMT(PP/Origo): mmtenv=ppmmtenv+origommtenv conversions/migrations
## #########################################################################
# KohaLXC/(pp/o)mmtenv: support creation of data+MMT-aware LXCs

## KohaLXC/mmtenv: support creation of data+mmt-aware LXCs
# - by default enable here if any dataset(s) have been defined (for the host)
hostnode_mmtenv_enabled: "{{ (hostnode_dataenv_dataset is defined and hostnode_dataenv_dataset.0 is defined) | ternary('true','false') }}"

# KohaLXC/ppmmtenv: PP/MMT-tool environment  (enabled when 'PallasPro' datasets exist)
hostnode_ppmmtenv_enabled: "{{ hostnode_mmtenv_enabled and (hostnode_dataenv_dataset | join(' ') | match('.*PallasPro.*')) }}"
## KohaLXC/ppmmtenv: PP/MMT-conversion settings
# - import chains: Preprocess Patrons Biblios Items Checkouts Holds Fines 
# - not defined or empty means 'all'
hostnode_ppmmtenv_importchains:
  - Preprocess
  - Patrons
#  - Biblios

# KohaLXC/origommtenv: Origo/MMT-tool environment (enabled when 'Origo' datasets exist)
hostnode_origommtenv_enabled: "{{ hostnode_mmtenv_enabled and (hostnode_dataenv_dataset | join(' ') | match('.*Origo.*')) }}"
## KohaLXC/origommtenv: PP/MMT-conversion settings
# - import chains: Preprocess Patrons Biblios Items Checkouts Holds Fines
hostnode_origommtenv_importchains:
  #- preprocess
  - biblios
  - items
  - borrowers
  - checkouts
  - fines
  - holds
  - rotatingCollections
  - acquisitions

## ###################################################
## KohaLXC/lxcenv+backup: server, client etc. settings
## ###################################################
# KohaLXC/backup: enable support for each server
hostnode_backup_enabled: true
# KohaLXC/backup: server
#hostnode_backupsrv:
# KohaLXC/backup(sshfs): backup server that support sshfs mounts to clients
hostnode_backup_sshfssrv: "{{ hostnode_backupsrv }}"
# KohaLXC/backup+data: root dir [Backup-server]
hostnode_backup_rootdir: /vol
# KohaLXC/backup+data: backup-dir (symlinked) [Backup-server]
hostnode_backup_backupdir: /Backup
# KohaLXC/backup: mount path [Backup-client]
hostnode_backup_clientpath: /mnt/Backup@remote
# KohaLXC/backup: date specs to make backup [Backup-client]
hostnode_backup_interval: 7


## ###########################
## Server: updates/reboots/nic
## ###########################
# Rebootable server
hostnode_reboot_enabled: false
# Upgradable server
hostnode_upgrade_enabled: false
# Pattern to ignore pckgs from upgrades
hostnode_upgrade_pckgsignore:
# Network-card interface
hostnode_network_interface: eth0

## #########################
## Server security/hardening 
## #########################
## Secure/hardening of the server
hostnode_secure_enabled: false
## 00 - packages needed for security/hardening
hostnode_secure_pckgs:
  - openssh-client
  - openssh-server
## 17 - Analyze system logs
# Enable reports always when the script is run
hostnode_secure_logwatch_always: false
# Logwatch packges
hostnode_secure_logwatch_pckgs:
  - logwatch
  - libdate-manip-perl
  - libsys-cpu-perl
  - libsys-meminfo-perl
# Output type: [stdout], mail
hostnode_secure_logwatch_output: mail
# Format of the report: [text], html
hostnode_secure_logwatch_format: html
# Range of the report: All, Today, [Yesterday]
hostnode_secure_logwatch_range: All
# Level of the report: [Low (0)], Med (5), High (10)
hostnode_secure_logwatch_detail: High
# Period to report (default: All)
hostnode_secure_logwatch_reportperiod: 30
# Where to report (email-address):
# - @gmail addresses do not seem to work, probably cause/if
#   the server only has 'mailutils' installed
hostnode_secure_logwatch_reportemail: webmaster@localhost

###############
## Storage: LVM
###############
## LVM support: false/true
hostnode_lvm_enabled: false
# LVM-related packages
hostnode_lvm_pckgs:
  - lvm2
# Volume group (VG) name (main): e.g /dev/roi1-vg
hostnode_lvmvg_main: host-vg
# Volume group (VG) name (backup+data): e.g /dev/roidata-vg 
hostnode_lvmvg_data: hostdata-vg
# Logical volume for host OS (root): /dev/roi1_vg/root
hostnode_lvmlv_os: root 
# Logical volume size for host OS (root)
hostnode_lvmlv_os_size: 80G
# Logical volume for backups: /dev/roidata-vg/backup
hostnode_lvmlv_backup: backup
# Logical volume size for bckups
hostnode_lvmlv_backup_size: +65%FREE
# Logical volume for data (containers): /dev/roi1_vg/data
hostnode_lvmlv_data: data 
# Logical volume size for (containers) dir-data
hostnode_lvmlv_data_size: +100%FREE
# Filesystem for LV/data
hostnode_lvmlv_data_fs: ext4
# Logical volume for zfspool (containers): /dev/roi1_vg/tank
hostnode_lvmlv_tank: tank 
# Logical volume size for (containers) zfspool-data
hostnode_lvmlv_tank_size: +100%FREE
# Volume/zpool-name for LV/tank
hostnode_lvmlv_tank_fs: zfstank
# Logical volume for swap: /dev/roi1_vg/swap_1
hostnode_lvmlv_swap: swap_1 
# Logical volume size for swap (e.g RAM size)
hostnode_lvmlv_swap_size: 128G 

###############
## Storage: ZFS
###############
## ZFS support: true/false
hostnode_zfs_enabled: false
# ZFS-related packages
hostnode_zfs_pckgs:
  - zfsutils-linux

# ZFS/zpool name
hostnode_zfs_zpool: "{{ hostnode_lvmlv_tank_fs | d('zfstank') }}"
# ZFS LXC-root filesystem in LV-'tank'/zpool for LXC-containers'
hostnode_zfs_rootdir: lxc

## ##############
## KohaLXC/lxcenv
## ##############
## Enablement (pckgs+paths): Koha/hosts LXC-environment:
hostnode_lxcenv_enabled: true
# Packages needed for LXC-environment
hostnode_lxcenv_pckgs:
 - lxc
 - lxc-templates
 - bridge-utils
 - wget
# Directory for LXC-environment related scripts/configs in KohaLXC-tool
hostnode_lxcenv_confdir: "{{ hostnode_kohalxc_tooldir }}/conf.d/env.lxc"
# Directory for Koha-related LXC-container definitions and setups
#hostnode_lxcenv_setupdir: "{{ hostnode_kohalxc_setupdir }}"

## LXC networking:  manual (configured) / dynamic (dhcp)
hostnode_lxcenv_networking: dhcp
#hostnode_lxcenv_networking: manual
# LXC-network domain name: none, lxc, weblxc, mdblxc
hostnode_lxcenv_domain:

## Koha-host/lxc-environment filesystem/storage defaults:
# Container rootfs path (folder where LXCs are placed)
hostnode_lxcenv_lxcpath: /var/lib/lxc
# Container ZFS-rootfs path (folder where ZFS-enabled LXCs are placed)
hostnode_lxcenv_zfspath: /var/lib/zfslxc
# Container rootfs partition minimum size (if partitioned)
hostnode_lxcenv_rootfs_size: 100G
# Container backing store (dir/zfs/lvm/btrfs..)
hostnode_lxcenv_bdev: dir
# Container zfsroot backing store (in case bdev is 'zfs')
hostnode_lxcenv_zfsroot: "{{ hostnode_zfs_zpool }}/{{ hostnode_zfs_rootdir }}"

## Container logging
# - log directory: server <devops>/log -dir (must relative to LXC-operuser home)
hostnode_lxcenv_logdir: "log"
#hostnode_lxcenv_logdir: "/home/{{ kohalxc_operuser | d('ubuntu') }}/log"
# - log file: kohalxc-ansible.log
hostnode_lxcenv_logfile: "{{ hostnode_lxcenv_logdir }}/kohalxc-ansible.log"
# - log_level: INFO/DEBUG
hostnode_lxcenv_loglevel: DEBUG

## ##########################
## LXC: defaults/provisioning
## ##########################

## LXC: mount entries
# - end-part of LXC mount entries: specs: no opts, bind, create dirs, no fs checks
hostnode_lxc_mount_post: none bind,create=dir 0 0
# - kohatools
hostnode_lxc_mount_kohatools_pre: lxc.mount.entry = /home/{{ hostnode_operuser }}/Works/KohaLXC/kohatools
hostnode_lxc_mount_kohatools: "{{ hostnode_lxc_mount_kohatools_pre }} home/{{ kohalxc_operuser }}/KohaLXC/kohatools {{ hostnode_lxc_mount_post }}"
# - kohadata: dump4mmt-[dataset]/default
hostnode_lxc_mount_kohadata_pre: lxc.mount.entry = /home/{{ hostnode_operuser }}/Works/{{ kohalxc_organization }}/kohadata/dump4mmt-{{ hostnode_dataenv_datasets | selectattr('default','defined') | map(attribute='name') | first | d('default') }}
#hostnode_lxc_mount_kohadata_pre: lxc.mount.entry = /home/{{ hostnode_operuser }}/Works/{{ kohalxc_organization }}/kohadata/dump4mmt-{{ hostnode_dataenv_dataset.0 | d('default') }}
hostnode_lxc_mount_kohadata: "{{ hostnode_lxc_mount_kohadata_pre }} home/{{ kohalxc_operuser }}/{{ kohalxc_organization }}/kohadata {{ hostnode_lxc_mount_post }}"
# - kohadata: dump4mmt-convsource:
hostnode_lxc_mount_convsource_pre: lxc.mount.entry = /home/{{ hostnode_operuser }}/Works/{{ kohalxc_organization }}/kohaconv }}
hostnode_lxc_mount_convsource: "{{ hostnode_lxc_mount_convsource_pre }} home/{{ kohalxc_operuser }}/{{ kohalxc_organization }}/kohadata/dump4mmt-convsource {{ hostnode_lxc_mount_post }}"
hostnode_lxc_mounts:
  - "{{ hostnode_lxc_mount_kohatools }}" 
  - "{{ hostnode_lxc_mount_kohadata }}"

## LXC: groups
hostnode_lxc_groups:
  - lxc.group = {{ hostnode_lxcenv_domain | d('lxc') }}

## LXC: start
hostode_lxc_starts:
  - lxc.start.auto = 0
  - lxc.start.delay = 0
  - lxc.start.order = 0

## LXC: container_command
# - common LXC-setups to run during Ansible/lxc-create:
hostnode_lxc_container_command: |
  addgroup --gid "{{hostnode_kohagrp_gid}}" "{{hostnode_kohagrp_name}}"
  usermod -a -G "{{hostnode_kohagrp_name}}" `getent passwd 1000 | cut -d: -f1`
  export KOHALXC_OPERUSER=$(getent passwd 1000 | cut -d: -f1) && export KOHALXC_OPERHOME=/home/$KOHALXC_OPERUSER
  [[ -z $KOHALXC_OPERUSER ]] && export KOHALXC_OPERHOME=/tmp
  mkdir -p $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logdir }}
  touch $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  id | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  chown -R 1000:1000 $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logdir }}
  echo "== kohalxc [ansible:lxc_create]: Playbook:'kohalappi' in roles/hostnode/defaults/main.yaml)" | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  echo "== kohalxc [ansible:lxc_create]: `date`" | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  env | grep KOHA | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  echo "== kohalxc [ansible:lxc_create]: Use '{{ hostnode_lxcenv_networking }}' scheme for IP-addresses in LXC-net.." | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  [[ "manual" == "{{ hostnode_lxcenv_networking }}" ]] && sed -i "s/iface eth0 inet dhcp/iface eth0 inet manual/" /etc/network/interfaces
  [[ "dhcp" == "{{ hostnode_lxcenv_networking }}" ]] && sed -i "s/iface eth0 inet manual/iface eth0 inet dhcp/" /etc/network/interfaces
  echo "== kohalxc [ansible:lxc_create]: Contents of: /etc/network/interfaces:" | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  cat /etc/network/interfaces | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  ifconfig -a | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}

# LXC: container command: kohalxc/mdbenv pckgs installation
# - MariaDB-5.5/Mysql-5.5 non-interactive installation (debconf/apt-get)
hostnode_mdbenv_pckginstall: |
  export KOHALXC_OPERUSER=$(getent passwd 1000 | cut -d: -f1) && export KOHALXC_OPERHOME=/home/$KOHALXC_OPERUSER
  [[ -z $KOHALXC_OPERUSER ]] && export KOHALXC_OPERHOME=/tmp
  echo "== kohalxc [ansible:mdbenv]: Debconf for non-interactive install of database server (MariaDB-5.5)" | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  debconf-set-selections <<< "mariadb-server-5.5 mysql-server/root_password password"
  debconf-set-selections <<< "mariadb-server-5.5 mysql-server/root_password_again password"
  echo "== kohalxc [ansible:mdbenv]: Installing database server (MariaDB-5.5)" | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}
  DEBIAN_FRONTEND=noninteractive apt-get -q -y install mariadb-server-5.5
  mysqladmin ping status -u root | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }}

# LXC: container command: kohalxc/kohaenv pckgs installation
# - Koha non-interactive (dev)-installation (debconf/apt-get)
hostnode_kohaenv_setup: |
  export KOHALXC_OPERUSER=$(getent passwd 1000 | cut -d: -f1) && export KOHALXC_OPERHOME=/home/$KOHALXC_OPERUSER
  [[ -z $KOHALXC_OPERUSER ]] && export KOHALXC_OPERHOME=/tmp
  echo "== kohalxc [ansible:kohaenv]: Installing Koha/ILS (Kohasuomi_3.16 Git-master)" | tee -a $KOHALXC_OPERHOME/{{ hostnode_lxcenv_logfile }};
  id && pwd && ls -la

## ###############
## Koha/webapp env
## ###############
hostnode_kohaenv_srvdomain: localdomain
# Koha/webapp: server name (DNS)
hostnode_kohaenv_srvname: localhost
#hostnode_kohaenv_ssl_acmechallenge:

## ########################
## LXCs: defaults/templates
## ########################
## LXC: template
# - template (distro): Ubuntu
hostnode_lxc_tmpl: ubuntu
# - template/release: Trusty 14.04 LTS
hostnode_lxc_tmpl_release: trusty
# - template/packages: installed to all LXCs
hostnode_lxc_tmpl_pckgs: "wget,joe,nano,python2.7-minimal,git,tig"
# - template/auth_key:
hostnode_lxc_tmpl_authkey: ".ssh/id_rsa.pub"

# LXC (list of): containers
# Default LXCs (list-of-dicts), leave undefined for now:
#hostnode_lxc_defaults:
# All LXCs
# - TODO: how to empty the lists/dicts here):
#hostnode_lxcs: {} # empty dict, flow mapping (with_dict)
#hostnode_lxcs: [] # empty hash, block mapping (with_items)
# - TODO: how to define a list of containers at role/defaults level:
#hostnode_lxcs:
