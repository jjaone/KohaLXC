---
# File: roles/hostnode/tasks/lxcenv-setup.yaml
# #############################################################################
# Code is part of the KohaLXC/kohatools Ansible/Bash tooling environment
# for Koha/ILS-development, deployment & database conversion/migration tasks.
# Author: Jukka Aaltonen, Koha-Lappi, Rovaniemi City Library, Lapland/Finland.
# License: GNU General Public License version 3.
# 
# Description: LXC environment setup
# - setup hostnodes LXC-environment in playbook inventories
# - ensure availability of all required distro packages
# -
# #############################################################################

## Ensure env.* pckgs are installed
# [KohaLXC]: lxcenv: Packages for LXC-environment(s)
- name: lxcenv - Ensure all needed packages are installed
  become: yes
  apt: >
    name="{{ item }}"
    update_cache="yes"
    state="present"
    autoremove="yes"
  with_flattened:
    - hostnode_lxcenv_pckgs
  when:
    - hostnode_lxcenv_enabled

## [TODO]: LXC networking, DNS, resolvconf, dnsmasq host settings..

## Debug: some lxcenv related networking and domain settings
- debug: var=hostnode_lxcenv_enabled,hostnode_lxcenv_pckgs,hostnode_lxcenv_networking,hostnode_lxcenv_domain

## LXC-containers: retrieve defaults from 'roles/hostnode/vars/lxcs'
- include_vars: lxcs/lxc_defaults.yaml
# LXCs: to be provisioned/running in inventory host..
# - 'kldev_dmdbks', 'kltest_dmdbks', ..
- include_vars: file=lxcs/lxc-kldev_dmdbks.yaml name=kldev_dmdbks
- include_vars: file=lxcs/lxc-kltest_dmdbks.yaml name=kltest_dmdbks

## LXC-containers: factize defined LXCs
- name: Collect all defined LXCs
  set_fact:
    hostnode_lxcs:
      - "{{ kldev_dmdbks }}"
      - "{{ kltest_dmdbks }}"
  #ignore_errors: yes

## Show all LXC-containers
- name: Show all defined LXCs (provisionable/running in inventory host)
  debug: var=item.net.domain,item.lxc.name,item.lxc.state,item.lxc.template
  with_items: hostnode_lxcs | d()
  changed_when: false
  when:
    - item is defined
    - item.net is defined
    - item.net.domain is defined and item.net.domain in inventory_hostname

## Ensure that LXCs to be provisioned are stopped (if they exists already)
- name: Ensure provisionable LXCs are stopped (if they are present)
  become: yes
  #environment:
  #  KOHALXC_WORKS: "{{ hostnode_kohalxc_works }}"
  #  KOHALXC_ROOTDIR: "{{ hostnode_kohalxc_rootdir }}"
  #  KOHALXC_TOOLDIR: "{{ hostnode_kohalxc_tooldir }}"
  #  KOHALXC_ORGANIZATION: "{{ hostnode_kohalxc_organization }}"
  shell: "lxc-ls -f --active | grep -q {{ item.lxc.name }} && lxc-stop -n {{ item.lxc.name }} || echo 'Nothing to stop.'"
  args:
    executable: /bin/bash
    chdir: "/home/{{ hostnode_operuser }}"
  with_items: hostnode_lxcs | d()
  when:
    - item is defined
    - item.net is defined
    - item.lxc is defined and item.lxc.name is defined
    - item.net.domain is defined and item.net.domain in inventory_hostname

## Create/re-configure and enable all LXCs
# - should be done this way only in remote 'development' and 'testing'
- name: Create/re-configure all defined LXCs
  become: yes
  lxc_container:
    "{{ item.lxc }}"
  with_items: hostnode_lxcs | d()
  register: cmd_lxccreate
  when:
    - item is defined
    - item.lxc is defined
    - item.net is defined
    - item.lxc.container_config is defined
    - item.net.domain is defined and item.net.domain in inventory_hostname

- debug: var=cmd_lxccreate.results
## Check whether we have auth/host-key for sshing to LXCs
- name: Has control host already auth/host-key for jump-sshing to remote LXCs
  #debug: var=item.lxc_container.name,item.item.net.domain,item.lxc_container.state
  environment:
    LXCHOST: "{{item.lxc_container.name}}.{{item.item.net.domain}}"
  shell: ssh-keygen -l -F "$LXCHOST" > /dev/null || echo "$LXCHOST"
  with_items: cmd_lxccreate.results
  register: cmd_sshkeys_missing
  when:
    - item.lxc_container is defined and item.lxc_container.state == "running"
    - item.item.net is defined
    - item.item.net.domain is defined and item.item.net.domain in inventory_hostname
  delegate_to: localhost

- debug: var=cmd_sshkeys_missing.results
## Ensure control host/user auth key is present for jump-sshing to remote LXCs
# - relevant parts copied from kohahosts/lxcenv-setup.yaml (222)
# - above check based on 'known_hosts' entry in control host, not the key in LXCS
# - pass only to runnning LXCs (in respective hosts) whose keys are missing
- name: Pass control host/user auth-key for jump-sshing to remote LXCs
  environment:
    LXCHOST: "{{ item.stdout }}"
    SSHPASS: "{{ kohalxc_operpass }}"
  shell: sshpass -e ssh-copy-id -o 'StrictHostKeyChecking=no' -o 'ProxyCommand=ssh -q {{ hostnode_operuser }}@{{ ansible_host }} -p {{ hostnode_sshport }} -W %h:%p' -i {{ local_home }}/.ssh/id_rsa.pub {{ kohalxc_operuser }}@$LXCHOST
  with_items: cmd_sshkeys_missing.results
  when:
    - item is defined
    - item.stdout is defined and item.stdout != ''
  delegate_to: localhost

#- debug: var=hostnode_lxcs,ansible_ssh_common_args

## Abort play here (for testing and development):
#- fail:

 
