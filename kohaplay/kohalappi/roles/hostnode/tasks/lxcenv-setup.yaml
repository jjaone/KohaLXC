---
# File: roles/hostnode/tasks/lxcenv-setup.yaml
# #############################################################################
# Code is part of the KohaLXC/kohatools Ansible/Bash tooling environment
# for Koha/ILS-development, deployment & database conversion/migration tasks.
# Author: Jukka Aaltonen, Koha-Lappi, Rovaniemi City Library, Lapland/Finland.
# License: GNU General Public License version 3.
# 
# Description: LXC environment setup
# - setup hostnodes LXC-environment in playbook inventories
# - ensure availability of all required distro packages
# -
# #############################################################################

## Ensure env.* pckgs are installed
# [KohaLXC]: lxcenv: Packages for LXC-environment(s)
- name: lxcenv - Ensure all needed packages are installed
  become: yes
  apt: >
    name="{{ item }}"
    update_cache="yes"
    state="present"
    autoremove="yes"
  with_flattened:
    - hostnode_lxcenv_pckgs

## [TODO]: LXC networking, DNS, resolvconf, dnsmasq host settings..

## Debug: some lxcenv related networking and domain settings
- debug: var=hostnode_lxcenv_enabled,hostnode_lxcenv_pckgs,hostnode_lxcenv_networking,hostnode_lxcenv_domain

## Create directory with correct permissions for custom localized facts
- name: lxcenv - Create default directory for custom Ansible/LXC-related facts
  become: yes
  file: |
    path=/etc/{{ item }}
    state=directory
    recurse=yes
    force=yes
    mode="g=rx,o-rwx"
    group="{{ hostnode_kohagrp_name | d('koha') }}"
  with_items:
    - ansible
    - ansible/facts.d

## LXC-containers:
# - retrieve list of all named LXCs to be provisioned
- include_vars: lxcs/all_lxcs.yaml name=lxc_names
#- debug: var=lxc_names
# - retrieve defaults from 'roles/<role>/vars/lxcs/default'
- include_vars: lxcs/default/config/default.yaml
# LXCs: to be provisioned/running in inventory host in: $KOHALXC_SETUP
# - 'kldev_dmdbks', 'kldev_mdbks', 'kltest_dmdb', 'kltest_mdbks'
- include_vars: file=lxcs/kldev_dmdbks.weblxc/config/kldev_dmdbks.yaml name=kldev_dmdbks
- include_vars: file=lxcs/kltest_dmdb.mdblxc/config/kltest_dmdb.yaml name=kltest_dmdb
- include_vars: file=lxcs/kltest_mdbks.mdblxc/config/kltest_mdbks.yaml name=kltest_mdbks

## LXC-containers: factize defined LXCs
- name: lxcenv - Collect all defined LXCs
  set_fact:
    hostnode_lxcs:
      - "{{ kldev_dmdbks }}"
      - "{{ kltest_dmdb }}"
# Comment out our 'testikoha' to protect it from being changed or deleted
# - 2017-03-08: Keep this out from or tool-chain during 'testing' phase
#      - "{{ kltest_mdbks }}"

#- debug: var=hostnode_lxcs,hostnode_kohalxc_tooldir,kohalxc_tooldir
## Extract the env enablements from lxc.group's in container_config
# TODO: (remove this): delete *.fact files first -> obsolete, dirs have been cleared previously
#- name: lxcenv - Start LXC-environments facts building with clean state
#  file: |
#    path="{{ hostnode_kohalxc_tooldir}}/conf.d/env.data/lxcs/{{ item.lxc.name | d('default') }}.{{ item.net.domain | d('lxc') }}/config/{{ item.lxc.name | d('default') }}.fact"
#    state=absent
#  with_items: hostnode_lxcs | d()
#  when:
#    - item.net.domain is defined and item.net.domain in inventory_hostname
    
- name: lxcenv - Extract LXC-environments facts from lxc.group in 'container_config'
  template: >
    src="files/kohalxc_lxcenv/getEnvironmentFromContainerConfig.yaml.j2"
    dest="{{ hostnode_kohalxc_tooldir}}/conf.d/env.data/lxcs/{{ item.lxc.name | d('default') }}.{{ item.net.domain | d('lxc') }}/config/{{ item.lxc.name | d('default') }}.fact"
    force="yes"
  with_items: hostnode_lxcs | d()
  when:
    - item.net.domain is defined and item.net.domain in inventory_hostname

## Show all LXC-containers
- name: lxcenv - Show all defined LXCs (provisionable/running in inventory host)
  debug: var=item.net.domain,item.lxc.name,item.lxc.state
  with_items: hostnode_lxcs | d()
  changed_when: false
  when:
    - item is defined
    - item.net is defined
    - item.net.domain is defined and item.net.domain in inventory_hostname

## Ensure that LXCs to be provisioned are stopped (if they exists already)
- name: lxcenv - Ensure provisionable LXCs are stopped (if they are present)
  become: yes
  shell: "lxc-ls -f --active | grep -q {{ item.lxc.name }} && lxc-stop -n {{ item.lxc.name }} || echo 'Nothing to stop.'"
  args:
    executable: /bin/bash
    chdir: "/home/{{ hostnode_operuser }}"
  with_items: hostnode_lxcs | d()
  when:
    - item is defined
    - item.net is defined
    - item.lxc is defined and item.lxc.name is defined
    - item.net.domain is defined and item.net.domain in inventory_hostname

- debug: var=hostnode_dataenv_enabled,hostnode_kohalxc_organization,hostnode_dataenv_dataset,hostnode_kohalxc_works
##  Use this to resolve need to manual mounts of devenv/convlog dirs
# - for browsing and migration/LXCs (non 'dataenv' hostnodes)
- name: non-dataenv(sshfs) - Mount datenv hosts folders for 'kohadata'
  #become: yes
  environment:
    SSHPASS: "{{hostnode_operpass}}"
  shell: |
    sshpass -e ssh-copy-id -o 'StrictHostKeyChecking=no' -i /home/{{hostnode_operuser}}/.ssh/id_rsa.pub {{hostnode_operuser}}@{{hostnode_websrv}}
    (cd {{hostnode_kohalxc_works}}/{{hostnode_kohalxc_organization}}/kohadata &&
    mkdir -vp dump4mmt-convsource && chmod g+w dump4mmt-convsource &&
    [[ ! -e dump4mmt-default ]] && ln -s dump4mmt-convsource dump4mmt-default;
    [[ ! -d dump4mmt-convsource/logs ]] && sshfs -o allow_other,reconnect {{hostnode_operuser}}@{{hostnode_websrv}}:Works/{{hostnode_kohalxc_organization}}/kohadata/dump4mmt-default/source.0/ {{hostnode_kohalxc_works}}/{{hostnode_kohalxc_organization}}/kohadata/dump4mmt-convsource;
    ls -l dump4mmt-default/ && echo "== All done.")
  args:
    executable: /bin/bash
  when:
    - not hostnode_dataenv_enabled

- name: Mount access for Koha-staff to dump4default-convsources (if any)
  become: yes
  shell: |
    [[ -d {{hostnode_kohalxc_works}}/{{hostnode_kohalxc_organization}}/kohadata/dump4mmt-convsource ]] && ( rm -f /home/koha/{dumpdefault,konversiolokit,virkailijakirjeet} &&
    ln -f -s {{hostnode_kohalxc_works}}/{{hostnode_kohalxc_organization}}/kohadata/dump4mmt-convsource /home/koha/dumpdefault &&
    ln -f -s {{hostnode_kohalxc_works}}/{{hostnode_kohalxc_organization}}/kohadata/dump4mmt-convsource/logs /home/koha/konversiolokit &&
    ln -f -s {{hostnode_kohalxc_works}}/{{hostnode_kohalxc_organization}}/kohadata/dump4mmt-convsource/target/Patrons/staffaccounts/letters /home/koha/virkailijakirjeet &&
    echo "== All symlinks done.")
    exit 0
  args:
    executable: /bin/bash
  when:
    - not hostnode_dataenv_enabled

## Create/re-configure and enable all LXCs
# - do this only in remote 'development' and 'testing'
- name: lxcenv - Create/re-configure all defined LXCs
  become: yes
  lxc_container:
    "{{ item.lxc }}"
  with_items: hostnode_lxcs | d()
  register: cmd_lxccreate
  when:
    - item is defined
    - item.lxc is defined
    - item.net is defined
    - item.lxc.container_config is defined
    - item.net.domain is defined and item.net.domain in inventory_hostname

#- debug: var=cmd_lxccreate.results
## TODO: Ensure that hostnode ssh-key has been copied to provisioned LXC
- name: lxcenv - Ensure host is authorized to PK-access in LXC
  environment:
    LXCHOST: "{{ item.lxc_container.name }}.{{ item.item.net.domain }}"
    LXCUSER: "{{ item.item.net.user | d('ubuntu') }}"
    SSHPASS: "{{ kohalxc_operpass }}"
  shell: sshpass -e ssh-copy-id -i .ssh/id_rsa.pub $LXCUSER@$LXCHOST
  no_log: True
  with_items: cmd_lxccreate.results
  when:
    - item.lxc_container is defined and item.lxc_container.state == "running"
    - item.item.net is defined
    - item.item.net.domain is defined and item.item.net.domain in inventory_hostname

## Check whether we have auth/host-key for sshing to LXCs
- name: lxcenv - Has control host auth/host-key for jump-sshing to remote LXCs
  #debug: var=item.lxc_container.name,item.item.net.domain,item.lxc_container.state
  environment:
    LXCHOST: "{{item.lxc_container.name}}.{{item.item.net.domain}}"
  shell: ssh-keygen -l -F "$LXCHOST" > /dev/null || echo "$LXCHOST"
  with_items: cmd_lxccreate.results
  register: cmd_sshkeys_missing
  when:
    - item.lxc_container is defined and item.lxc_container.state == "running"
    - item.item.net is defined
    - item.item.net.domain is defined and item.item.net.domain in inventory_hostname
  delegate_to: localhost

#- debug: var=cmd_sshkeys_missing.results,kohalxc_operuser,hostnode_sshport
## Ensure control host/user auth key is present for jump-sshing to remote LXCs
# - relevant parts copied from kohahosts/lxcenv-setup.yaml (222)
# - above check based on 'known_hosts' entry in control host, not the key in LXCS
# - pass only to runnning LXCs (in respective hosts) whose keys are missing
- name: lxcenv - Pass control host/user auth-key for jump-sshing to remote LXCs
  environment:
    LXCHOST: "{{ item.stdout }}"
    LXCUSER: "{{ item.item.item.net.user | d(kohalxc_operuser) }}"
    SSHPASS: "{{ kohalxc_operpass }}"
  shell: sshpass -e ssh-copy-id -o 'StrictHostKeyChecking=no' -o 'ProxyCommand=ssh -q {{ hostnode_operuser }}@{{ ansible_host }} -p {{ hostnode_sshport }} -W %h:%p' -i {{ local_home }}/.ssh/id_rsa.pub $LXCUSER@$LXCHOST
  #debug: msg="item.stdout={{item.stdout}},item.item.item.net.usr={{item.item.item.net.user}},sshpass -e ssh-copy-id -o 'StrictHostKeyChecking=no' -o 'ProxyCommand=ssh -q {{ hostnode_operuser }}@{{ ansible_host }} -p {{ hostnode_sshport }} -W %h:%p' -i {{ local_home }}/.ssh/id_rsa.pub $LXCUSER@$LXCHOST"
  #shell: echo sshpass -e ssh-copy-id -o 'StrictHostKeyChecking=no' -o 'ProxyCommand=ssh -q {{ hostnode_operuser }}@{{ ansible_host }} -p {{ hostnode_sshport }} -W %h:%p' -i {{ local_home }}/.ssh/id_rsa.pub {{ kohalxc_operuser }}@$LXCHOST
  #no_log: True
  with_items: cmd_sshkeys_missing.results
  when:
    - item is defined
    - item.stdout is defined and item.stdout != ''
    - item.item is defined and item.item.item is defined and item.item.item.net is defined
    - item.item.item.net.user is defined
  delegate_to: localhost

## Show the status of existing LXCs..
- name: lxcenv - status/setup - List status of running/stopped LXCs..
  become: yes
  shell: lxc-ls -f


## Abort play here (for testing and development):
#- fail:
