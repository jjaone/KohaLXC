---
# File: roles/hostnode/tasks/srvenv-setup.yaml
# #############################################################################
# Code is part of the KohaLXC/kohatools Ansible/Bash tooling environment
# for Koha/ILS-development, deployment & database conversion/migration tasks.
# Author: Jukka Aaltonen, Koha-Lappi, Rovaniemi City Library, Lapland/Finland.
# License: GNU General Public License version 3.
# 
# Description: "srvenv-setup"
# - setup the hostnodes server-environment in playbook inventories
# - users and groups for 'dataenv' and 'devenv'
# - OS, distro, kernel (base installation of Ubuntu 16.04 LTS Server required)
# - timezone, localizations
# - filesystems: lvm, btrfs, zfs
# - network: iptables rules
# - apt packages: upgrade and update settings
# ##############################################################################

## Ensure 'kohasys'-user exists (by default: kohasys/1000)
# - [KohaLXC]:
- name: Make system user 'kohasys' for Koha/hosts-service management
  become: yes
  user: >
    name="{{ hostnode_kohasys_user }}"
    uid="{{ hostnode_kohasys_id }}"
    state="present"
    generate_ssh_key="yes"
    comment="Koha/LXC system user"
  when:
    - hostnode_kohasys_user is defined
    - hostnode_kohasys_id is defined

## Ensure 'koha'-user (rssh) exists (by derault: koha/1001
# - [KohaLXC]:dataenv
- name: Ensure user 'koha' (rssh) exists for Koha-data & transfers
  become: yes
  user: >
    name="{{ hostnode_kohagrp_name }}"
    uid="{{ hostnode_kohagrp_id }}"
    group="{{ hostnode_kohagrp_name }}"
    state="present"
    shell="/usr/bin/rssh"
    generate_ssh_key="no"
    comment="Koha/LXC visitor user"
  when:
    - hostnode_dataenv_enabled
    - hostnode_kohagrp_name is defined
    - hostnode_kohagrp_id is defined

## Setup remote data environment rssh.conf (dataenv/rssh settings)
# - [KohaLXC]:dataenv (not in 'local'dev) 
# - settings for 'KohaLXC' are in roles/common/defauls/main.yaml
# - kohalxc_dataenv == kohalxc_tooldir/conf.d/env.data
- name: Setup system-wide rssh config for remote KohaLXC/dataenv
  become: yes
  template: >
    src="files/kohalxc_dataenv-rssh.conf.j2"
    dest="/etc/rssh.conf"
    backup="no"
  when:
    - hostnode_dataenv_enabled
    - hostnode_environment != "localdev"

## Ensure 'koha'-group exists (by default: koha/1001)
# - [KohaLXC]:devenv
- name: Ensure group 'koha' exists for Koha-data & transfers
  become: yes
  group: >
    name="{{ hostnode_kohagrp_name }}"
    gid="{{ hostnode_kohagrp_id }}"
    state="present"
  when:
    - hostnode_devenv_enabled
    - hostnode_kohagrp_name is defined
    - hostnode_kohagrp_id is defined

## Ensure devops (kohaoper/1002) belongs to 'koha' group and has ssh-keys
# - [KohaLXC]:devenv
- name: Ensure devops has ssh-keys and belongs to 'koha' group
  become: yes
  user: >
    name="{{ hostnode_operuser }}"
    uid="{{ hostnode_operid }}"
    groups="{{ hostnode_kohagrp_name }}"
    append="yes"
    generate_ssh_key="yes"
    comment="Koha/LXC devops user"
  when:
    - hostnode_devenv_enabled
    - hostnode_operuser is defined
    - hostnode_operid is defined
    - hostnode_kohagrp_name is defined

## Setup remote developer environment shell profile (devenv/bash-profile)
# - [KohaLXC]:devenv
# - settings for 'KohaLXC' are in roles/common/defauls/main.yaml
# - kohalxc_devenv == kohalxc_tooldir/conf.d/env.dev
- name: Setup system-wide Bash profile for remote KohaLXC/devenv
  become: yes
  template: >
    src="files/kohalxc_devenv-bash_profile.sh.j2"
    dest="/etc/profile.d/kohalxc-devenv.sh"
    backup="no"
  when:
    - hostnode_devenv_enabled
    - hostnode_environment != "localdev"

## Ensure kohahosts_operuser (devops/HOME) has required dirs
# - [KOHALXC]:
- name: Ensure devops has dirs for scripts, logs and Works
  file: >
    path="/home/{{ hostnode_operuser }}/{{ item }}"
    state="directory"
  with_items:
    - bin
    - log
    - Works
- name: Ensure devops/Works subdirs exist for KohaLXC-tools setups (datasets)
  file: >
    path="/home/{{ hostnode_operuser }}/Works/{{ item }}"
    state="directory"
    mode="g+s,o-rwx"
    group="{{ hostnode_kohagrp_id }}"
    recurse="no"
  with_items:
    - KohaLXC
    - "{{ hostnode_kohalxc_organization | d('KohaSuomi') }}"

- debug: var=hostnode_dataenv_enabled,hostnode_dataenv_dataset
- debug: var=kohalxc_datadir,kohalxc_dataset
## Pull/extract any uploads of dataset dumps from datasrv/'koha'
# -[KohaLXC]:dataenv
# -from: srv:/home/koha/Works/KohaLappi/{{item}}
# -to: local:{{ kohalxc_works }}/{{ kohalxc_organization }}/kohadata/"
# -item: hostnode_dataebv_datasets: e.g. "dump4mmt-Axiell-20161019-Lappi_PallasPro"
- name: Pull (rsync) listed dataset dumps from server (to mngmt host)
  synchronize: >
    mode="pull"
    src="/home/{{ hostnode_kohagrp_name | d('koha') }}/Works/{{ hostnode_kohalxc_organization }}/dump4mmt-{{ item }}"
    dest="{{ kohalxc_datadir }}"
    group="yes"
    perms="yes"
    recursive="yes"
    delete="no"
  with_items: "{{ hostnode_dataenv_dataset | d({}) }}"
  when:
    - hostnode_dataenv_enabled
    - kohalxc_datadir is defined
    - hostnode_dataenv_dataset is defined
    - hostnode_dataenv_dataset != ""

## Ensure dataset extraction has required subdirs (local)
# - [KohaLXC]:dataenv (local)
- name: Set required dirs and perms for dataset extraction (in mngmt host)
  file: >
    path="{{ kohalxc_datadir }}/dump4mmt-{{ item.0 }}/source/{{ item.1 }}"
    state="directory"
    recurse="no"
    group="{{ hostnode_kohagrp_id }}"
    mode="u=rwx,g=rwxs,o-rwx"
  with_nested:
    - "{{ hostnode_dataenv_dataset }}"
    - [ 'preprocessed', 'scripts', 'target' ]
  when:
    - hostnode_dataenv_enabled
    - kohalxc_datadir is defined
  delegate_to: localhost

## Extract/uncompress listed dataset(s) from pulled archives, if any (local)
# - [KohaLXC]:dataenv (local)
# - must use local action/gunzip cause no Ansible module for "uncompress" exists
# - Note: "shopt -s/-u nullglob" would work, but only with /bin/bash
- name: Extract listed datasets/table data from pulled dumps (in mngmt host)
  local_action: shell for f in {{ kohalxc_datadir }}/dump4mmt-{{ item }}/*.gz; do [ -f "$f" ] || continue; d=$(dirname $f); t=$(basename $f .gz); ( cd $d/source && test ! -f $t && gunzip -vc $f > $t || echo -n "$t," ); done
#  local_action: shell for f in {{ kohalxc_datadir }}/dump4mmt-{{ item }}/*.{kir,dat}.gz; do [ -f "$f" ] || continue; d=$(dirname $f); t=$(basename $f .gz); ( cd $d/source && test ! -f $t && gunzip -vc $f > $t || echo -n "$t," ); done
  with_items: "{{ hostnode_dataenv_dataset | d({}) }}"
  when:
    - hostnode_dataenv_enabled
    - kohalxc_datadir is defined

#- debug: var=kohalxc_rootdir
## Push/copy KohaLXC/kohatools scripts and configs to server(s):
# - [KohaLXC]:
# - to: /home/'hostnode_operuser'/Works(/KohaLXC)
- name: Push KohaLXC tools scripts/configs to devops/Works
  synchronize: >
    mode="push"
    src="{{ kohalxc_rootdir }}"
    dest="/home/{{ hostnode_operuser }}/Works"
    owner="no"
    group="yes"
    perms="yes"
    rsync_timeout="15"
    recursive="yes"
    delete="yes"

## Ensure devops/hostnode has required symlinks in $HOME
# - [KohaLXC]:
- name: Symlink for 'kohalxc' main script in devops/HOME
  file: >
    src="/home/{{ hostnode_operuser }}/Works/KohaLXC/kohalxc.sh"
    dest="{{ '/home/'~hostnode_operuser~'/bin/kohalxc' }}"
    state="link"
- name: Symlink for 'kohasetup' script in devops/HOME
  file: >
    src="/home/{{ hostnode_operuser }}/Works/KohaLXC/kohatools/kohasetup.sh"
    dest="{{ '/home/'~hostnode_operuser~'/bin/kohasetup' }}"
    state="link"

- debug: var=kohalxc_setupdir,kohalxc_datadir,hostnode_dataenv_dataset,hostnode_mmtenv_enabled
## Push/copy kohalxc/setups and kohadata/<dumpname>/source datasets:
# - [KohaLXC]:dataenv
# - to: /home/'hostnode_operuser'/Works/<org>/{kohalxc,kohadata}
- name: Push KohaLXC lxc-setups & org datasets to operuser/Works 
  synchronize: >
    mode="push"
    src="{{ item }}"
    dest="/home/{{ hostnode_operuser }}/Works/{{ hostnode_kohalxc_organization }}"
    owner="no"
    group="yes"
    perms="yes"
    rsync_timeout="15"
    rsync_opts="--prune-empty-dirs --include='**/' --include='/*/default/**' --include='/*/dump4mmt-default**' --include='/*/dump4mmt-*/source*/**' --exclude='*'"
    recursive="yes"
    delete="no"
  with_items:
    - "{{ kohalxc_setupdir }}"
    - "{{ kohalxc_datadir }}"
  when:
    - hostnode_dataenv_enabled
    - hostnode_dataenv_dataset is defined
    - hostnode_dataenv_dataset != ""
  
## Abort play here (for testing and development):
- fail:
