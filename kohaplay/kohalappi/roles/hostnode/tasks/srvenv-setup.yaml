---
# File: roles/hostnode/tasks/srvenv-setup.yaml
# #############################################################################
# Code is part of the KohaLXC/kohatools Ansible/Bash tooling environment
# for Koha/ILS-development, deployment & database conversion/migration tasks.
# Author: Jukka Aaltonen, Koha-Lappi, Rovaniemi City Library, Lapland/Finland.
# License: GNU General Public License version 3.
# 
# Description: server environment setup tasks
# - setup hostnodes server-environment in playbook inventories
# - prepare dialogless installation of listed packages
# - ensure availability of all required distro packages
# - check/create users and groups for server (and development) environments
# - setup localization (locale, timezone?) and (development) shell profile
# - prepare KohaLXC-tools environment (directories & perms)
# - handle network configuration and traffic rules (iptables) persistence
# - distro package cache, server upgrades, updates and reboot support
# [TODO]:
# - OS, distro, kernel (base installation of Ubuntu 16.04 LTS Server)
# - filesystems and storage: lvm, btrfs, zfs
# - network: interfaces and iptables rules + persistence, SSL
# - server monitoring and backups
# ##############################################################################

## Prevent install dialogs for select packages using debconf
# [KohaLXC]: srvenv: dialogless package installation (if needed)
- name: Prevent install dialogs for packages using debconf-set-selections
  become: yes
  debconf:
    name: "{{ item.name }}"
    setting: "{{ item.name }}/{{ item.q }}"
    vtype: "{{ item.type }}"
    value: "{{ item.value}}"
  with_items:
    - { name: iptables-persistent, q: autosave_v4, type: boolean, value: true }
    - { name: iptables-persistent, q: autosave_v6, type: boolean, value: true }

## Ensure env.* pckgs are installed
# [KohaLXC]: srvenv: Packages for server environment
- name: srvenv - Ensure all needed packages are installed
  become: yes
  apt: >
    name="{{ item }}"
    update_cache="yes"
    state="present"
    autoremove="yes"
  with_flattened:
    - hostnode_srvenv_pckgs
    - hostnode_secure_pckgs
  when:
    - hostnode_srvenv_enabled or hostnode_secure_enabled

## Ensure 'kohasys'-user exists (by default: kohasys/1000)
# [KohaLXC]:srvenv
- name: srvenv - Make system user 'kohasys' for Koha/hosts-service management
  become: yes
  user: >
    name="{{ hostnode_kohasys_user }}"
    uid="{{ hostnode_kohasys_id }}"
    state="present"
    generate_ssh_key="yes"
    comment="Koha/LXC system user"
  when:
    - hostnode_kohasys_user is defined
    - hostnode_kohasys_id is defined

## Ensure devops (kohaoper/1002) belongs to 'koha' group and has ssh-keys
# [KohaLXC]:srvenv
- name: srvenv - Ensure devops has ssh-keys and belongs to 'koha' group
  become: yes
  user: >
    name="{{ hostnode_operuser }}"
    uid="{{ hostnode_operid }}"
    groups="{{ hostnode_kohagrp_name }}"
    append="yes"
    generate_ssh_key="yes"
    comment="Koha/LXC devops user"
  when:
    - hostnode_operuser is defined
    - hostnode_operid is defined
    - hostnode_kohagrp_name is defined

## Ensure locales we need are present
# [KOHALXC]:srvenv
- name: srvenv - Ensure needed locales for internationalization are present
  become: yes
  locale_gen:
    name: "{{ item }}"
    state: present
  with_items:
    - en_US.UTF-8
    - fi_FI.UTF-8

- debug: var=hostnode_environment,kohalxc_install,kohalxc_tooldir,kohalxc_organization
## Setup remote developer environment shell profile (devenv/bash-profile)
# [KohaLXC]:devenv
# - TODO: isn't this done in 'common' alreaydy, can we remove this from here?
# - default settings for 'KohaLXC' are in: 'roles/common/defauls/main.yaml'
# - kohalxc_devenv (local) configs are in: '[kohalxc_tooldir]/conf.d/env.dev'
- name: devenv - Setup system-wide Bash profile for remote KohaLXC-development
  become: yes
  template: >
    src="files/kohalxc_devenv/bash_profile.sh.j2"
    dest="/etc/profile.d/kohalxc-devenv.sh"
    backup="no"
  when:
    - hostnode_devenv_enabled
    - hostnode_environment != "localdev"

## Ensure kohahosts_operuser (devops/HOME) has required dirs
# [KOHALXC]:srvenv
- name: srvenv - Ensure devops has dirs for scripts, logs and Works
  file: >
    path="/home/{{ hostnode_operuser }}/{{ item }}"
    state="directory"
  with_items:
    - bin
    - log
    - Works
- name: srvenv - Ensure devops Works-subdirs exist for KohaLXC-tools setups (datasets)
  file: >
    path="{{ hostnode_kohalxc_works }}/{{ item }}"
    state="directory"
    mode="g+s,o-rwx"
    group="{{ hostnode_kohagrp_id }}"
    recurse="no"
  with_items:
    - KohaLXC
    - "{{ hostnode_kohalxc_organization | d('KohaSuomi') }}"
  notify: Sync kohalxc
## Instead of using 'synchronize' task below as previously,
# - forcefully notify here handler to sync KohaLXC-contents to server/devops
# - e.g. KohaLXC-tools need to be in place for 'dataenv/mmtenv'-stuff later
# - can use '--force-handler' to ensure handler is called (atleast eventually)
- meta: flush_handlers

- debug: var="hostnode_kohalxc_rootdir,hostnode_kohalxc_tooldir"
## Ensure devops/hostnode has required symlinks in $HOME
# [KohaLXC]:srvenv
- name: srvenv - Symlink for 'kohalxc' main script in devops/HOME
  file: >
    src="{{ hostnode_kohalxc_rootdir }}/kohalxc.sh"
    dest="{{ '/home/'~hostnode_operuser~'/bin/kohalxc' }}"
    state="link"
    force="yes"
- name: srvenv - Symlink for 'kohasetup' script in devops/HOME
  file: >
    src="{{ hostnode_kohalxc_tooldir }}/kohasetup.sh"
    dest="{{ '/home/'~hostnode_operuser~'/bin/kohasetup' }}"
    state="link"
    force="yes"

- debug: var=ansible_host,hostnode_backupsrv,hostnode_backup_sshfssrv,hostnode_backup_mountpath
## Enable Backup-locations using 'sshfs' (e.g. from 'ansible_host' to backupsrv)
- name: srvenv/backup(sshfs) - Ensure backup/source is unmounted from backup/target
  become: yes
  shell: mount | grep -q {{ hostnode_backup_mountpath | d('/mnt/Backup@remote') }} || exit 0 && umount {{ hostnode_backup_mountpath | d('/mnt/Backup@remote') }}
  when:
    - ansible_host != hostnode_backup_sshfssrv
- name: srvenv/backup(sshfs) - Ensure the mount-point for backup/target exist
  become: yes
  file: >
    path="{{ hostnode_backup_mountpath | d('/mnt/Backup@remote') }}"
    state="directory"
    owner="{{ hostnode_operuser }}"
  when:
    - ansible_host != hostnode_backup_sshfssrv
- name: srvenv/backup(sshfs) - Ensure backup/source auth-key is in backup/target
  environment:
    SSHPASS: "{{ hostnode_operpass }}"
  shell: sshpass -e ssh-copy-id -o 'StrictHostKeyChecking=no' -i /home/{{ hostnode_operuser }}/.ssh/id_rsa.pub {{ hostnode_operuser }}@{{ hostnode_backupsrv }}
  when:
    - ansible_host != hostnode_backup_sshfssrv
- name: srvenv/backup(sshfs) - Mount remote backup/target location
  shell: /usr/bin/sshfs -o idmap=user,reconnect {{ hostnode_operuser }}@{{ hostnode_backup_sshfssrv | d(hostnode_backupsrv) }}:/{{ hostnode_backup_targetdir | d('Backup') }} {{ hostnode_backup_mountpath | d('/mnt/Backup@remote') }}
  when:
    - ansible_host != hostnode_backup_sshfssrv
- name: srvenv/backup(sshfs) - Symlink for '/Backup' to mounted target location
  become: yes
  file: >
    src="{{ hostnode_backup_mountpath }}"
    dest="/Backup"
    state="link"
    force="yes"
  when:
    - ansible_host != hostnode_backup_sshfssrv

## Make sure hosts package cache is not stale
# [KohaLXC]:srvenv
- name: srvenv - Update apt cache (kept valid for past 4 hrs)
  become: yes
  apt:
    update_cache: yes
    cache_valid_time: 7200
  when: ansible_os_family == 'Debian'

## List packages that need to be updated/upgraded in the server
# [KohaLXC]:srvenv
- name: srvenv - List what is updatable/upgradable (sans held/ignored packages)
  shell: apt list --upgradable 2>/dev/null | grep -v '{{ hostnode_upgrade_pckgsignore | d() }}' | grep -s "upgradable"
  register: cmd_aptlist_upgrades
  failed_when: cmd_aptlist_upgrades.stderr != ""
  changed_when: cmd_aptlist_upgrades.rc == 0

- debug: var=hostnode_upgrade_enabled,hostnode_reboot_enabled,hostnode_dataenv_enabled
## Upgrade all packages
# [KohaLXC]:srvenv
- name: srvenv - Upgrade all packages to the latest version.
  become: yes
  shell: apt clean && apt update -y && apt upgrade -y
  when:
    - hostnode_upgrade_enabled
    - cmd_aptlist_upgrades.rc == 0
  changed_when: cmd_aptlist_upgrades.rc == 0

## Persist current iptables rules
# [KohaLXC]:srvenv
- name: Persist iptables rules (if upgrades and possible reboot so requires)
  become: yes
  shell: >
    service netfilter-persistent save
  when:
    - hostnode_reboot_enabled
    - cmd_aptlist_upgrades.rc == 0

## Reboot server
# [KohaLXC]:srvenv
- name: srvenv - Reboot server (when package upgrade so requires)
  become: yes
  shell: >
    sleep 5 && /sbin/shutdown -r now "KohaLXC/Ansible update/upgrade triggered reboot."
    removes="/var/run/reboot-required"
  async: 1
  poll: 0
  when:
    - hostnode_reboot_enabled
  # [TODO]: keep below commented-out for reboots also when not upgrading..
  #  - cmd_aptlist_upgrades.rc == 0
  ignore_errors: true

## Wait for server to come back on-line
# [KohaLXC]:srvenv
- name: srvenv - Wait for server to get online after reboot
  become: no
  local_action: >
    wait_for host="{{ ansible_host }}"
    state=started
    port="{{ hostnode_sshport | d('22') }}"
    delay=10
    timeout=300
    connect_timeout=5
  when:
    - hostnode_reboot_enabled
  # [TODO]: keep below commented-out for reboots also when not upgrading..
  #  - cmd_aptlist_upgrades.rc == 0

