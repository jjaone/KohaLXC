#!/bin/bash

# File: kohatools/ppmmtws/ConversionTools/makeStaffAccounts.sh
# #############################################################################
# Code is part of the KohaLXC/kohatools Ansible/Bash setup tooling scripts
# for Koha/ILS-development, deployment & database conversion/migration tasks.
# Author: Pasi Korkalo, OUTI Libararies, Oulu/Finland. (create_accounts.sh)
# Author: Jukka Aaltonen, Koha-Lappi, Rovaniemi City Library, Lapland/Finland.
# License: Gnu General Public License version 2 (or later).
# 
# Description:
# KohaLXC/kohatools/ppmmtws conversion scripts for Ansible/Bash tooling:
# - Works in Ubuntu Server LTS (14.04/16.04) guest/host environments
# - Requires: xlsx2csv, apg, groff, ps2pdf and iconv for this to work
# - Generate staff accounts (after PP/MMT conversion of Patrons) 
# - Accounts can be imported to Koha with bulkPatronImport.pl.
# - It will assign basic user info and account expiry date based on
#   the definitions in .xslx or .csv sourcefile (see the example).
# - Letters to account owners will be generated under "letters" directory:
#   1. They can be print them on a single double sided sheet
#   2. Fold the letters so that the account information is on the inside.
#   3. Place tem envelopes and send to your staff 
# - Works as CLI-script or as 'kohalxc'-tool or from Ansible/KohaLXC-playbooks
# 
# Modified: 2017-01 by "Jukka Aaltonen, Koha-Lappi" (@jjaone) 
## #############################################################################

## Base name of ConversionTable to be generated, e.g. 'staffaccounts'
SRC_NAME="${1:-staffaccounts}"
[[ -z "$SRC_NAME" ]] && echo "== Error: no Conversion/TranslationTable defined.. exiting." && echo && exit 2
echo && echo "== Name of the Translation/ConversionTable to be generated SRC_NAME='$SRC_NAME'"
KOHALXC_TOOLDIR="${KOHALXC_TOOLDIR:=$KOHALXC_WORKS/KohaLXC/kohatools}"
echo && echo "== KOHALXC_TOOLDIR=$KOHALXC_TOOLDIR"
KOHALXC_DATADIR="${KOHALXC_DATADIR:=$KOHALXC_WORKS/$KOHALXC_ORGANIZATION/kohadata}"
echo && echo "== KOHALXC_DATADIR=$KOHALXC_DATADIR"
#KOHALXC_DATASET="${KOHALXC_DATASET:=default}"
echo "== KOHALXC_DATASET=$KOHALXC_DATASET"
KOHALXC_DATASET_SOURCE="${KOHALXC_DATASET_SOURCE:=source.0}"

## If we are passed with dataset from the environment..
if [[ -n "$KOHALXC_DATASET" ]]; then
    KOHALXC_DATASET_DUMPPREFIX=dump4mmt
    KOHALXC_DATASET_DUMP=$KOHALXC_DATASET_DUMPPREFIX-$KOHALXC_DATASET
    echo && echo "== KOHALXC_DATASET_DUMPPREFIX=$KOHALXC_DATASET_DUMPPREFIX"
    echo "== KOHALXC_DATASET_DUMP=$KOHALXC_DATASET_DUMP"
    KOHALXC_DATASET_SOURCE=$KOHALXC_DATASET_DUMP/$KOHALXC_DATASET_SOURCE
fi

echo "== KOHALXC_DATASET_SOURCE=$KOHALXC_DATASET_SOURCE"

## Check that we have proper dataenv source dir for fixes and building files..
[[ ! -d "$KOHALXC_DATADIR/$KOHALXC_DATASET_SOURCE" ]] && echo "== Warm: $KOHALXC_DATADIR/$KOHALXC_DATASET_SOURCE not found.." && echo && exit 2

## Just for verbosity 
#(echo && cd $KOHALXC_DATADIR/$KOHALXC_DATASET_DUMP &&  pwd && ls -l)

## Make sure directories exist for these DATASET fixes/edits
mkdir -vp $KOHALXC_DATADIR/$KOHALXC_DATASET_SOURCE/{TranslationTables,logs,preprocessed,scripts,target}

echo
SOURCES_DIR="${KOHALXC_DATADIR}/${KOHALXC_DATASET_SOURCE}/TranslationTables"
TARGET_DIR="${KOHALXC_DATADIR}/${KOHALXC_DATASET_SOURCE}/target/Patrons"
mkdir -vp $TARGET_DIR/${SRC_NAME}/letters && echo || exit 2
(cd ${TARGET_DIR}/${SRC_NAME} && truncate --size=0 ${SRC_NAME}.migrateme && rm -f letters/*)
echo "== Script dir:$(pwd)" && (cd $SOURCES_DIR && echo "== Datasources dir:$(pwd)" && ls -l ${SRC_NAME}.csv) && (cd $TARGET_DIR && echo "== Target dir:$(pwd)" && ls -l)

##################
## Do the stuff ##
##################

getfield() {
  echo -n $2 | cut -f $1 -d ',' | sed 's/^ *//;s/ *$//;s///g'
}

makeusername() {
  username="$(echo -n $1 | sed 's/[åÅ]/a/g;s/[äÄ]/a/g;s/[öÖ]/o/g;s/[ÈèÉé]/e/g;s/-//g' | cut -c 1-4 | tr [[:upper:]] [[:lower:]])"
  addchars=$((4 - $(expr length $username)))
  username="$username$(echo -n $2 | sed 's/[åÅ]/a/g;s/[äÄ]/a/g;s/[öÖ]/o/g;s/[ÈèÉé]/e/g;s/-//g' | cut -c 1-$((4 + $addchars)) | tr [[:upper:]] [[:lower:]])"
  echo -n $username
}

# I find the amount of ways of writing the date astonishing, these don't probably cover half of them...
# Check carefully.

convertdatedashed() {
  date="$(echo $1 | sed 's/ *//g')"
  day=$(echo $date | cut -f 2 -d '-')
  test $(expr length $day 2> /dev/null) -eq 1 && day="0$day" 2> /dev/null
  month=$(echo $date | cut -f 1 -d '-')
  test $(expr length $month 2> /dev/null) -eq 1 && month="0$month" 2> /dev/null
  year=$(echo $date | cut -f 3 -d '-')
  echo "$year-$month-$day"
}

convertdateslashed() {
  date="$(echo $1 | sed 's/ *//g')"
  day=$(echo $date | cut -f 2 -d '/')
  test $(expr length $day 2> /dev/null) -eq 1 && day="0$day" 2> /dev/null
  month=$(echo $date | cut -f 1 -d '/')
  test $(expr length $month 2> /dev/null) -eq 1 && month="0$month" 2> /dev/null
  year=$(echo $date | cut -f 3 -d '/')
  echo "$year-$month-$day"
}

convertdatedotted() {
  date="$(echo $1 | sed 's/ *//g')"
  day=$(echo $date | cut -f 1 -d '.')
  test $(expr length $day 2> /dev/null) -eq 1 && day="0$day" 2> /dev/null
  month=$(echo $date | cut -f 2 -d '.')
  test $(expr length $month 2> /dev/null) -eq 1 && month="0$month" 2> /dev/null
  year=$(echo $date | cut -f 3 -d '.')
  echo "$year-$month-$day"
}

converttonumber() {
  echo -n $1 | sed 's/ONE/1/g;s/TWO/2/g;s/THREE/3/g;s/FOUR/4/g;s/FIVE/5/g;s/SIX/6/g;s/SEVEN/7/g;s/EIGHT/8/g;s/NINE/9/g;s/ZERO/0/g'
}

## Settings: names and paths
#test -z "$1" && SRC_DIR="sources"
#test -z "$SRC_DIR" && echo "Need directory name with sourcefile as parameter." && exit 1

## [TODO]:KohaLappi; what to set here?
borrowernumber=300000 # This is the first borrowernumber available for staff accounts, it will probably be converted to something completely different by bulkPatronImport.pl.
givenusernames=":"
IFS='
'
#for file in $(find "$1" -name '*.xlsx'); do
#for file in ${SRC_DIR}/*.xlsx; do
   file=$SOURCES_DIR/$SRC_NAME
   echo "== makeStaffAccounts.sh; processing '$file':"
#    # You need to "apt-get install xlsx2csv" for this
#    xlsx2csv -d ';' -i "$file" > "/tmp/create_accounts.csv"
#    
   for patron in $(cat $file.csv | sed '1,17d'); do

      borrowernumber=$((borrowernumber + 1))
      surname="$(getfield 1 $patron)"
      firstname="$(getfield 2 $patron)"
      countycode="$(getfield 8 $patron)"

      unset usernameorder; unset username

      # "Questionable" usernames can be overriden with "overrides" file like this: "Firstname Surname,username". Without the quotes obviously and one user per line.
      test -f overrides && username="$(grep "^$firstname $surname" overrides 2> /dev/null | cut -f 2 -d ',')"

      # And then we make the username if there were no overrides
      if test -z "$username"; then
        usernameorder="muodostettu etu- ja sukunimestäsi: "
        username="$(makeusername $firstname $surname)"
      fi
      
      if echo "$givenusernames" | grep -q ":$username:"; then
        usernameorder="muodostettu suku- ja etunimestäsi: "
        username="$(makeusername $surname $firstname)"
      fi

      if echo "$givenusernames" | grep -q ":$username:"; then
        usernameorder="etu- ja sukunimestäsi + yksilöivästä tunnistenumerosta "
        username="$(makeusername $firstname $surname)$(($borrowernumber - 186000))"
      fi
      # Kohalappi: username is generated as: kuntatunnus(3)+surname(3)+firstname(3)
      if echo "$givenusernames" | grep -q ":$username:"; then
        usernameorder="muodostettu kuntatunnuksesta + sukunimestäsi + etunimestäsi: "
        username="$(makeusername $countycode$firstname $surname)"
      fi
      
      # Keep a list of them so we don't give the same username to more than one person
      givenusernames="$givenusernames$username:"

      # Slow method to create memorable passwords (need "apg" for this)
      passwordgen="$(apg -n 1 -m 10 -x 10 -M CN -t)"
      # Fast method to create random passwords
      #passwordgen="$(< /dev/urandom tr -cd '[:alnum:]' | head -c 10)" && passwordgen="$passwordgen ($passwordgen)"
      password="$(echo $passwordgen | cut -f 1 -d ' ')"
      passwordpronounce="$(echo $passwordgen | cut -f 2 -d ' ')"
      passwordpronounce="$(converttonumber $passwordpronounce)"
      passwordpronounce="$(echo $passwordpronounce | sed 's/(//g;s/)//g;')"
      
      echo -n "== Adding patron: $firstname $surname ($username) "
      
      # Address information
      address="$(getfield 4 $patron)"
      zipcode="$(getfield 5 $patron)"
      city="$(getfield 6 $patron)"

      # Note: in Kohalappi 8 = countycode

      # Set patron category
      categorycode="$(getfield 9 $patron)"
      categorycode="$(echo $categorycode | tr [[:lower:]] [[:upper:]])"
      
      # Set date of birth
      dateofbirth="$(getfield 3 $patron)"

      # In KohaLappi; when we have date in 'yyyy-mm-dd' format in CSV
      # - we can comment out the below converdate* parts
      #dateofbirth="19$(convertdatedashed $dateofbirth)"
      #
      #if test $(expr length $dateofbirth) -ne 10; then
      #  dateofbirth="$(getfield 3 $patron)"
      #  dateofbirth="$(convertdatedotted $dateofbirth)"
      #fi
      #
      #if test $(expr length $dateofbirth) -ne 10; then
      #  dateofbirth="$(getfield 3 $patron)"
      #  dateofbirth="$(convertdateslashed $dateofbirth)"
      #fi

      # Set homebranch
      branchcode="$(getfield 7 $patron)"
      
      # Set the account expiry date
      dateexpiry="$(getfield 21 $patron)"

      #dateexpiry="20$(convertdatedashed $dateexpiry) 23:59:59+02"
      #if test $(expr length $dateexpiry) -ne 22; then 
      #  dateexpiry="$(getfield 21 $patron)"
      #  dateexpiry="20$(convertdatedotted $dateexpiry) 23:59:59+02"
      #fi
      #if test $(expr length $dateexpiry) -ne 22; then 
      #  dateexpiry="$(getfield 21 $patron)"
      #  dateexpiry="20$(convertdateslashed $dateexpiry) 23:59:59+02"
      #fi
      ## In KohaLappi; we could also set the date for all here manually:
      # - "2022-05-30 23:59:59+02"  
      dateexpiry="2022-05-30 23:59:59+02"
       
      # Couln't make sense of the scribblings in Excel, use the default expiry date
      test $(expr length $dateexpiry) -ne 22 && dateexpiry="2012-05-30 23:59:59+02" 
      
      echo -n "[$dateexpiry]"

      # Resolve branch information for the letters
      #branchinfo="$(grep "^$branchcode" ../ConversionTables/branchesConversionTable.csv)"
      # TODO: need to fix this by having branches ConevrsionTable.csv available
      #branchinfo="$(grep "^$branchcode" ../conversiontables/branchesConversionTable.csv)"

      #letter_branchname="$(echo $branchinfo | cut -f 2 -d ',' | sed 's/"//g')

      # TODO: need to fix below by having branches ConevrsionTable.csv available
      #letter_branchname=$(echo $branchinfo | cut -f 2 -d ',' | sed 's/"//g')
      #letter_branchaddress=$(echo $branchinfo | cut -f 3 -d ',' | sed 's/"//g')
      #letter_branchzip=$(echo $branchinfo | cut -f 4 -d ',')
      #letter_branchcity=$(echo $branchinfo | cut -f 5 -d ',')

      # Tell the users when their accounts expire in the letters
      expirydateletter="$(echo $dateexpiry | cut -f 3 -d '-' | cut -f 1 -d ' ').$(echo $dateexpiry | cut -f 2 -d '-').$(echo $dateexpiry | cut -f 1 -d '-')"

      echo # This will cr/lf when the patron has been added, hands off!

      # Build the Perl-hash for bulkImporting Patrons..
      #echo "\$VAR1 = bless( {'active' => 't','address' => '$address','borrowernumber' => '$borrowernumber','branchcode' => '$branchcode','cardnumber' => '$username','categorycode' => '$categorycode','city' => '$city','country' => 'Suomi','dateenrolled' => '2015-10-19 0:0:0+02','dateexpiry' => '$dateexpiry','dateofbirth' => '$dateofbirth','email' => '','extendedAttributes' => '','firstname' => '$firstname','mobile' => '','password' => '$password','phone' => '','privacy' => '1','sex' => '','smsalertnumber' => '','standing_penalties' => '','state' => 'Pohjois-Suomi','surname' => '$surname','userid' => '$username','zipcode' => '$zipcode'}, 'Item' );" >> kohamigration/${file%.xlsx}.migrateme
      echo "\$VAR1 = bless( {'active' => 't','address' => '$address','borrowernumber' => '$borrowernumber','branchcode' => '$branchcode','cardnumber' => '$username','categorycode' => '$categorycode','city' => '$city','country' => 'Suomi','dateenrolled' => '2016-01-27 0:0:0+02','dateexpiry' => '$dateexpiry','dateofbirth' => '$dateofbirth','email' => '','extendedAttributes' => '','firstname' => '$firstname','mobile' => '','password' => '$password','phone' => '','privacy' => '1','sex' => '','smsalertnumber' => '','standing_penalties' => '','state' => '','surname' => '$surname','userid' => '$username','zipcode' => '$zipcode'}, 'Item' );" >> ${TARGET_DIR}/${SRC_NAME}/$(basename $file).migrateme

      ##  Generate letter to account owner
      mkdir -p ${TARGET_DIR}/${SRC_NAME}/letters
      #echo "== Generate letter to user:'$firstname $surname' in ${TARGET_DIR}/${SRC_NAME}/letters"

      #for line in $(seq 65); do
      #   < /dev/urandom tr -cd '[:alnum:]' | head -c 120 >> /tmp/${SRC_NAME}.txt
      # echo >> /tmp/${SRC_NAME}.removeme
      #done

cat << EOF > /tmp/${SRC_NAME}.txt
.ps 15
.sp 6
Koha-Lappi
.sp 6

.ps 13
Hei $firstname $surname!
.sp 3

Tunnuksesi Koha-järjestelmässä on $usernameorder${username}.
.br
Salasanasi on 10 merkkiä pitkä: ${password}.
.br
Muistamisen helpottamiseksi voit painaa mieleesi ${passwordpronounce}.
.sp 1

Käyttäjätunnuksesi ja salasanasi ovat henkilökohtaisia, ethän jaa niitä muiden kanssa.
.br
Tunnuksen haltijana olet vastuussa kaikesta mitä tunnuksella järjestelmässä tehdään.
.br
Tunnuksesi on voimassa $expirydateletter asti.
.sp3

Terveisin Koha-Lappi
.br
EOF

      # For PS generattion need to have 'groff' package in host/lxc
      iconv -f utf-8 -t iso-8859-1 /tmp/${SRC_NAME}.txt | groff -Tps - > /tmp/${SRC_NAME}.ps 2> /dev/null
      # For PDF generattion need to have 'ghostscript' package in host/lxc
      ps2pdf /tmp/${SRC_NAME}.ps "${TARGET_DIR}/${SRC_NAME}/letters/${surname}_${firstname}.pdf"

   done
#
#done

unset IFS
echo "$givenusernames" > ${TARGET_DIR}/${SRC_NAME}/givenusernames.txt

exit 0
