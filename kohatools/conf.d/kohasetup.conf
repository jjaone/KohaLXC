#!/bin/bash

# File: $KOHALXC_ROOTDIR/kohatools/conf.d/kohasetup.conf
# #############################################################################
# Code is part of the KohaLXC/kohatools Ansible/Bash setup tooling scripts
# for Koha/ILS-development, deployment & database conversion/migration tasks.
# Author: Jukka Aaltonen, Koha-aLappi, Rovaniemi City Library, Lapland/Finland.
# License: Gnu General Public License version.
#
# Description:
# Common settings and functions for kohalxc/kohatools setups, located for:
# - LXC-envs  in "$HOME/kohatools/conf.d/kohasetup.conf"
# - host-envs in "$KOHALXC_ROOTDIR/kohatools/conf.d/kohasetup.conf"
#
# Created: 2016-07 by "roikohadev" (@jjaone)
# Modified:
# #############################################################################

## Separate settings for host and LXC-envs
export KOHASETUP_TOOLSDIR=${KOHALXC_ROOTDIR:-$HOME}/kohatools
export KOHASETUP_LOGDIR=${KOHASETUP_TOOLSDIR}/log
export KOHASETUP_CONFIGDIR=${KOHASETUP_TOOLSDIR}/conf.d
export KOHASETUP_CONFIGFILE=${KOHASETUP_CONFIGDIR}/kohasetup.conf

## Set some defaults
app="${app:-kohasetup}"  # application/script name
sapp="kohasetup"         # section/sub-command

# Ensure we (subcmd of kohalxc) have a link to app/script in $HOME/bin
mkdir -p $HOME/bin
[[ -L $HOME/bin/$sapp ]] || 
    ln -s $KOHASETUP_TOOLSDIR/$sapp.sh $HOME/bin/$sapp
# Unset sapp after script symlinks handlings
sapp=

# Ensure that we have a logdir and log(file)
logfile=${logfile:-$app.log}
logdir=${logdir:-$KOHASETUP_TOOLSDIR/log}
mkdir -p${VERBOSE} $logdir && log=$logdir/$logfile && touch $log

# [debug]: Just for debugging..
#echo "app=$app,sapp=$sapp"
#echo "logdir=$logdir, logfile=$logfile, log=$log"

## Get the runtime for the sccript
host=`hostname`
date=`date +"%F_%T"`

## Set the colors
# - bold (cyan)
clfgbold=36
# - emphasize (blue)
clfgemp=34
# - highlight (light magenta)
clfghl=95
# - error (red)
clfgerr=31

# Foreground color (default)
clfg=39
# Colors as echo vars
CLFG="\e[${clfg}m"
# Clear colorification
CLF0="\e[0m"
CLFGBOLD="\e[${clfgbold}m"
CLFGEMP="\e[${clfgemp}m"
CLFGHL="\e[${clfghl}m"
CLFGERR="\e[${clfgerr}m"

## Error/exit handling
# Error msg
err=""
# Error code
errcode=0


##############################################################################
## Common script functions and helpers
# - ecd, ech, ece
# - colortab
# TODO: should use: printf '%s\n' "$A", rather than echo "$"A in the script!!
###############################################################################

##################################################
## ecd: Echo colorify default (bold+emphasized)
# a = app name: 36
# s = app section: 36
# t ($1) normal tetx: 00
# e ($2) emphasized text: 34
#
function ecd {
    local a=$app
    local s=$sapp
    local t=$1
    local e=$2

    [[ -n "$a" ]] && echo -n -e "== \e[${clfgbold}m${a}\e[0m"
    [[ -n "$s" ]] && echo -n -e " \e[${clfgbold}m[${s}]\e[0m"
    [[ -n "$t" ]] && echo -n -e ": ${t}"
    [[ -n "$e" ]] && echo -e " \e[${clfgemp}m${e}\e[0m" || echo
}

##################################################
## ech: Echo colorify higlight (bold+highlight)
# a = app name: 36
# s = app section: 36
# t ($1) normal text: 00
# e ($2) higlighted text: 95
#
function ech {
    local a=$app
    local s=$sapp
    local t=$1
    local h=$2

    [[ -n "$a" ]] && echo -n -e "== \e[${clfgbold}m${a}\e[0m"
    [[ -n "$s" ]] && echo -n -e " \e[${clfgbold}m[${s}]\e[0m"
    [[ -n "$t" ]] && echo -n -e ": ${t}"
    [[ -n "$h" ]] && echo -e " \e[${clfghl}m${h}\e[0m" || echo
}

##################################################
## ece: Echo colorified for errors: (error color)
# $1 = application id
# $2 = err msg: 31
#
function ece {
    local a=$app
    local s=$sapp
    
    [[ -n "$a" ]] && echo -n -e "== \e[${clfgerr}m${a}\e[0m"
    [[ -n "$s" ]] && echo -n -e " \e[${clfgerr}m[${s}]"

    [[ -n "$*" ]] && echo -e ": \e[${clfgerr}m$*\e[0m" || echo
}

##################################################
## Tabify and colorify input stream
function colortab {
    sed 's/^/\t/' | sed -e 's/\t/\t\x1b[32m/' | sed -e 's/$/\x1b[0m/'
}

## Trap handling (EXIT-signal): Do on error exit..
function onexit {
    errcode=$?
    sapp=""
    echo
    [[ $errcode -eq 0 ]] && ecd "Done." || (sapp="error" && ece "Exit: $err ($errcode)")
    err="" && errcode=0
}
# Trap for error exit
trap onexit EXIT


##############################################################################
## Koha and application environment related scrips and utilities
#  _host-role: checks whetwer we are a LXC-container or not
#  _pckg-status: checks whether a deb-package is installed (0 = yes, 1 = no)
#  _pckgs-install:
##############################################################################


#####################################################################
## _host_role
# Check whether we are a LXC-container or not (i.e host)?
# - = (no args)
# - return (echo): 0 = not container/host, 1 = LXC-container
#####################################################################
function _host-role {
    rc=0
    host_role="Host/platform"

    ## Check whetehr we are a LXC-container
    sudo grep -qa "container=lxc" /proc/1/environ
    if [[ $? -eq 0 ]]; then
	host_role="LXC-container"; rc=1
    else
	host_role="Host/platform"; rc=0
    fi
    ech "Hostname (LXC-guest/host):" "$(hostname) ($host_role)"

    return $rc
}


#############################################################
# NOTINUSE - Package status function (from /usr/share/im-config)
#############################################################
# package_status <packagename>
# return TRUE (0) if properly installed
mytest_notinuse_package_status () {
    PACKAGE_NAME="$1"
    if [ "$( LANG=C dpkg-query -l "$PACKAGE_NAME" 2>/dev/null | \
        sed -n '6s/\([^ ]*\) .*$/\1/p' )" = "ii" ]; then
        # return TRUE
        return 0
    else
        return 1
    fi
}


##############################################################################
## _pckg-status: Check whether a package is installed or not
# $1 (p) = Pckg name to be tested/installd: 'ca-certificates','mysql-server'..
# - return (echo): 0 = installed, 1 = not installed
# Source: Howto check if a specific package is installed
# -http://stackoverflow.com/questions/1298066/check-if-a-package-is-installed-and-then-install-it-if-its-not
##############################################################################
#
function _pckg-status {
    p="$1"            # package to be tested

    # 0 = not installed, 1 = installed
    #echo $(dpkg-query -W -f='${Status}' "$p" 2>/dev/null | grep -c "ok installed")
    # 0 = installed, 1 = not installed
    [[ 0 -eq $(dpkg-query -W -f='${Status}' "$p" 2>/dev/null | grep -c "ok installed") ]] &&
	echo 1 ||
	    echo 0 
}


###############################################################################
## _pckgs-install:
# Check/install listed packages w/ default configs
# - $1 (pckglist): list of package names to check/install
#                : (default: "$KOHASETUP_<cmd>ENV_PCKGS")
###############################################################################
#
function _pckgs-install {
    rc=
    local pckglist=($*)
    #local sapp="install"
    [[ -n "$VERBOSE" ]] &&
	ech "Check and install packages:\n" "${pckglist[*]}"

    # Remember to set: "DEBIAN_FRONTEND="noninteractive" before "apt-get install"
    for pckg in "${pckglist[@]}"; do
	## Check/install package: "$pckg"
	(( $(_pckg-status $pckg) )) &&
	    (ecd "Installing package:" "$pckg"; \
	     DEBIAN_FRONTEND=noninteractive sudo -E apt-get -y install $pckg | colortab) ||
		( [[ -n "$VERBOSE" ]] && ecd "Already has package:" "$pckg [ok]" )
	# If not still installed, return with failure
	(( $(_pckg-status $pckg) )) &&
	    ece "Warn: could not install package:" "$pckg" &&
	    rc=11
    done

    # Error: something went wrong
    [[ $rc -ne 0 ]] &&
	ece "Error: something wrong in '_pckgs-install(code:$rc)'";
    ## Success: installations done
    [[ $rc -eq 0 ]] &&
	ecd "Status:" "listed packages are installed. [ok]"

    return $rc
}


##############################################################################
## _cpanm-status: Check whether Perl-module/package is installed or not
# $1 (p) = Pckg/module name to be tested/installd: 'App::Genpass', 'LWP::Curl'..
# - return (echo): 0 = installed, 1 = not installed
# Source: "How can I check if a Perl module/package is installed in my system?"
# -http://stackoverflow.com/questions/1039107/how-can-i-check-if-a-perl-module-is-installed-on-my-system-from-the-command-line
##############################################################################
#
function _cpanm-status {
    rc=0
    p="$1"            # package/module to be tested

    # 0 = installed, 1 = not installed
    perldoc -l "$p" > /dev/null 2>&1
    [[ "$?" -eq 0 ]] &&
	echo 0 ||
	    echo 1
}


###############################################################################
## _cpanm-install:
# Check/install listed Perl-packages/modules using system CPAN
# - $1 (pcklist): list of package names to check/install
#                : (usually from: "$KOHASETUP_<cmd>ENV_CPAN_DEPS")
###############################################################################
#
function _cpanm-install {
    local pckglist=($*) && rc=0

    #[[ -n "$VERBOSE" ]] &&
    #	ech "Check/install Perl-modules/CPAN-packages:\n" \
    #	    "${pckglist[*]}"

    ## First, ensure tha CPAN is installed/configured
    # - if not, configure it (automatizing all we can..)
    [[ -n "${VERBOSE}" ]] && PARAMS="-J" || PARAMS="-v"
    CMD_OUT=`PERL_MM_USE_DEFAULT=1 && sudo -E cpan $PARAMS 2>&1`
    echo && ech "Has CPAN:" "$CMD_OUT"

    ## Note: to install Perl/CPAN-module/package do:
    #+ "sudo perl -MCPAN -e 'install Foo::Bar'" (manually from terminal)
    #+ "cpan -i Foo::Bar"  (run tests)
    #+ "cpan -iT Foo::Bar" (do not run tests)
    
    for pckg in "${pckglist[@]}"; do
	#ech "Check/install Perl-module/package:" "$pckg"
	(( $(_cpanm-status $pckg) )) &&
	    (ecd "Installing Perl-module:" "$pckg"; \
	     sudo cpan -iT "$pckg" | colortab) ||
#	     export KOHASETUP_PMPCKG=$pckg; sudo -E perl -MCPAN -e 'install $ENV{KOHASETUP_PMPCKG}' | colortab) ||
		( [[ -n "$VERBOSE" ]] && ecd "Already has module:" "$pckg [ok]" )
	# If not still installed, return with failure
	(( $(_cpanm-status $pckg) )) &&
	    ece "Warn: could not install Perl-module from CPAN:" "$pckg" &&
	    rc=21
    done

    # Error: something went wrong
    [[ $rc -ne 0 ]] &&
	ece "Error: something wrong in '_cpanm-install(code:$rc)'";
    ## Success: installations done
    [[ $rc -eq 0 ]] &&
	ecd "Status:" "listed modules are installed. [ok]"

    return $rc

}


##############################################################################
## 00: koha-setup_0; "KOHA INSTALL": Initial setup and config
# Documentation used for these instructions:
# Source: https://github.com/KohaSuomi/kohasuomi/blob/kohasuomi3.16/INSTALL.ubuntu
# Source: https://wiki.koha-community.org/wiki/Koha_on_ubuntu_-_packages
# Source: https://wiki.koha-community.org/wiki/Koha_on_ubuntu_-_packages#Appendix_B:_Troubleshooting
##############################################################################
function koha-setup_0 {
    ## Head
    local sapp="$1-Koha"
    ecd "Setup:" "KOHA INSTALL, SETUP and CONFIG"
    ecd "Setup:" "[KohaSuomi-3.16 as LXC to Ubuntu Server LTS (14.04/16.04)]"

    ## Settings

    ## Do it
    ecd "Show:" "INSTALLATION GUIDES/DOCS:"
    ecd "- #1:" "https://github.com/KohaSuomi/kohasuomi/blob/kohasuomi3.16/INSTALL.ubuntu"
    ecd "- #2:" "https://wiki.koha-community.org/wiki/Koha_on_ubuntu_-_packages"
    ecd "- #3:" "https://wiki.koha-community.org/wiki/Version_Control_Using_Git"
    ecd "- #4:" "https://wiki.koha-community.org/wiki/Koha_on_ubuntu_-_packages#Appendix_B:_Troubleshooting"
    ## Exit
    return 0
}

##############################################################################
## 01: koha-setup_1; "ADD A KOHA COMMUNITY REPOSITORY"
#
###############################################################################
function koha-setup_1 {
    ## Head
    local sapp="$1-Repo"
    ecd "Setup:" "ADD KOHA COMMUNITY REPOSITORY"

    ## Settings
    KOHASETUP_APT_LIST="/etc/apt/sources.list.d/koha.list"

    KOHASETUP_COMMUNITY_REPO="http://debian.koha-community.org/koha"
    KOHASETUP_COMMUNITY_RELEASE="oldstable main" # one of: "(oldstable | stable | unstable) main"
    ## 'Stable': echo deb http://debian.koha-community.org/koha stable main | sudo tee $KOHA_APT_LIST
    ## 'Old stable': echo deb http://debian.koha-community.org/koha oldstable main | sudo tee $KOHA_APT_LIST
    ## 'Unstable': (tried for 'kldev_travel1' (2016-07): did not work!!)
    #echo deb http://debian.koha-community.org/koha unstable main | sudo tee $KOHA_APT_LIST

    ## Do it

    # Show what we have
    [[ -n "$VERBOSE" ]] && \
	ech "Contents of" "$KOHASETUP_APT_LIST:" &&
	[[ -f "$KOHASETUP_APT_LIST" ]] && (cat $KOHASETUP_APT_LIST | colortab) || echo "(does not exist)"

    # If repo for Koha has not been defined, set it and add the APT-keys
    if [[ ! -f $KOHASETUP_APT_LIST ]]; then
	ech "Setup: Add Koha-community-repo:" "$KOHASETUP_COMMUNITY_REPO $KOHASETUP_COMMUNITY_RELEASE" 
	echo deb $KOHASETUP_COMMUNITY_REPO $KOHASETUP_COMMUNITY_RELEASE | sudo tee $KOHASETUP_APT_LIST

	# Add the APT trusted key 
	wget -O- $KOHASETUP_COMMUNITY_REPO/gpg.asc | sudo apt-key add -
    fi

    ## TODO: Show current setings in verbose output

    # -show: all apt sources

    # -show: all apt-keys
    #echo -n -e "== \e[${clfg}m$app [$i-Repos]\e[0m Koha-related apt-keys:" &&
    ecd "Koha-related apt-keys:" && \
	sudo apt-key list | grep -C 2 'koha-community' | colortab

    ## Exit..
    return 0
}

##############################################################################
## 02: koha-setup_2: "UPDATE UBUNTU"
##
##############################################################################
function koha-setup_2 {
    ## Head
    local sapp="$1-Ubuntu"
    ecd "Setup:" "UPDATE UBUNTU PACKAGE ENVIRONMENT (apt-get)"

    ## Settings

    ## Do it:

    # apt.get: update and upgrade
    (sudo apt-get update && sudo apt-get upgrade) | colortab
    [[ "$?" -ne 0 ]] &&
	err="Update/upgrade (apg-get) Ubuntu failed" && exit 21;

    # apt-get: clean
    sudo apt-get clean
    [[ "$?" -ne 0 ]] &&
	err="Clean (apt-get) Ubuntu failed" && exit 22;

    ## Exit..
    return 0
}

##############################################################################
## 03: koha-setup_3; "DOWNLOAD THE LATEST KOHA RELEASE"
# Source (GIT/SSL-CA problems):
# - http://askubuntu.com/questions/636962/permission-issues-with-etc-ssl-certs-ca-certificates-crt
##
###############################################################################
function koha-setup_3 {
    ## Head
    local sapp="$1-Source"
    ecd "Download:" "DOWNLOAD (LATEST) KOHA SOURCE (Git) RELEASE"

    ## Settings
    KOHA_GIT_REPO="https://github.com/KohaSuomi/kohasuomi.git"
    #KOHA_GIT_REPO="git://git.koha-community.org/koha.git"


    ## Check/setup/installl some needed git-related tools/paclages
    [[ -f $KOHASETUP_CONFIGDIR/setup-git.conf ]] &&
	source $KOHASETUP_CONFIGDIR/setup-git.conf
    setup-gitenv
    (( "$?" )) &&
	err="Something wrong with 'git' client setup ('$?')" && exit 31

    ## Clone the KohaSuomi repository to 'kohaclone', if not there already 
    [[ -d "$HOME/kohaclone" ]] && cd $HOME/kohaclone &&
	git status | colortab | grep -qc "kohasuomi3.16"
    if (( ! $? )); then
	ecd "Warn:" "Git-repository for 'kohasuomi3.16 already exists"
    else
	git clone "$VERBOSE" --progress "$KOHA_GIT_REPO" kohaclone | colortab
	(( $? )) &&
	    err="Cloning of '$KOHA_GIT_REPO' to './kohaclone' failed" && exit 32
    fi

    # Go to cloned Koha-dir and get the status of the repo
    cd $HOME/kohaclone
    git status | colortab
    
    # Checkout a branch for us..
    #git checkout -b lappi_dev origin

    ## Exit
    return 0
}

##############################################################################
## 04: koha-setup_4; INSTALL ALL DEPENDENCIES
# - 04.A: Dependencies from the repository  (koha-deps and koha-perldeps)
# - 04.B: Check for missing Perl-dependencies
##
###############################################################################
function koha-setup_4 {
    ## Head
    local sapp="$1-Dependenices"
    ecd "Install:" "CHECK AND FIX ALL MISSING DEPENDENCIES"

    ## Settings

    ## Install pckgs 'koha-deps' and 'koha-perldeps' (and 'make')
    ecd "Install:" "Retrieve 'koha-deps' and koha-perldeps' pckgs.."
    sudo apt-get -y install koha-deps koha-perldeps make | colortab

    ## Check the dependencies
    ecd "Check:" "Resolve missing depencies (manual intervention needed)"
    cd $HOME/kohaclone
    ./koha_perl_deps.pl -m -u

    ## Initialize 'cpan'
    cpan

    return 40

    # Exit
    return 0
}

##############################################################################
## 05: 
##
###############################################################################
function koha-setup_5 {
    echo -e "== \e[${clfg}m$app [$i]\e[0m \e[${clfgemp}m KOHA SETUP $i\e[0m"

    return 50
}
