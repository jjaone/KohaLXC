#!/bin/bash

###############################################################################
# This is part of KohaLXC/kohasetup tools for KohaLappi-deployments projects  #
###############################################################################
# Setup "koha.env" for KohaSuomi in LXC for Ubuntu Server LTS (14.04/16.04)
# Author: Jukka Aaltonen (roikohadev), KohaLappi, Rovaniemi.
# Created: 2016-07, roikohadev
###############################################################################

## Script/application (if called from as standalone script)
local app="setup-koha"

# Source the main configuration/environment (in case we are called stand-alone)
KOHASETUP_CONFIGFILE="${KOHALXC_ROOTDIR:-$HOME}/kohatools/conf.d/kohasetup.conf"
. $KOHASETUP_CONFIGFILE


## Settings for "kohaenv" scripts/functions:

# Packages needed for koha-server
KOHASETUP_KOHAENV_PCKGS="ntp ca-certificates git btrfs-tools gettext libterm-readline-gnu-perl cpanminus"
# Packages needed for koha-application (KohaSuomi 3.16 dependencies)
#KOHASETUP_KOHAENV_PCKGS+="${KOHASETUP_KOHAENV_PCKGS_DEPS}"

# Koha-sources APT-list
KOHASETUP_KOHAENV_APTLIST="/etc/apt/sources.list.d/koha.list"
# Koha-community repository and release
KOHASETUP_KOHAENV_REPO="http://debian.koha-community.org/koha"
KOHASETUP_KOHAENV_RELEASE="oldstable main"
# Koha-soure code git-repository for KohaSuomi-based koha-dev installations
KOHASETUP_KOHAENV_GITREPO="https://github.com/KohaSuomi/kohasuomi.git"

## Database server (could be local/remote and mysql/-stable or mariadb/-stable)
# Db-server name/type: 'mysql' or 'mariadb'
KOHASETUP_KOHAENV_DBSRV=${KOHASETUP_MDBENV_SRVNAME:-"mysql"}
# Db-server host: 'localhost' or some remote host
KOHASETUP_KOHAENV_DBHOST=${KOHASETUP_MDBENV_DBHOST:-"localhost"}
# Db-server port
KOHASETUP_KOHAENV_DBPORT=${KOHASETUP_MDBENV_DBPORT:-"3306"}
# Db-server root-user
KOHASETUP_KOHAENV_DBROOT=${KOHASETUP_MDBENV_DBROOT:-"fakeroot"}
# Db-server root-passwd
KOHASETUP_KOHAENV_DBPASS=${KOHASETUP_MDBENV_DBPASS:-"fakerootpass"}

## Database settings for Koha
# Db-server: koha database
KOHASETUP_KOHAENV_KOHADB="kohadata"
# Db-server: koha-user
KOHASETUP_KOHAENV_KOHAUSER="fakekoha"
# Db-server: koha-user password
KOHASETUP_KOHAENV_KOHAPASS="fakekohapass"


#####################################################################
## kohaenv_xyzabc
# <description>
# $1 = $mdbsrv = database server name (mysql/mariadb)
#####################################################################
function kohaenv_xyzabc {
    rc=0; mdbsrv=$1

    return $rc
}

##############################################################################
## Overview of the status of the general koha-related environment aspects
#  A. srvenv: kernel, localization, LXC (name/type), partitions/storage, network..
#  B. devenv: Git and othe relevenat dev env tools
#  C. mdbenv: What database and how to connect to database?
#  - KOHASETUP_KOHAENV_DBCONNECTION = koha@locahost:3306
#  D: Koha-specifc server and application settings
###############################################################################
#
function kohaenv-status {
    rc=0
    
    ## (OBSOLETE: done in main): Re-check the role we have (host=0/lxc-container=1)
    #_host-role; rc=$?; islxc=$rc;

    ## 00: Show the documentation / guides for koha-setup here..
    kohaenv-setup_00

    ## 01: Show the dep-repository
    local sapp="status:repo"
    ech "Contents of" "$KOHASETUP_KOHAENV_APTLIST:" &&
	[[ -f $KOHASETUP_KOHAENV_APTLIST ]] &&
	(cat $KOHASETUP_KOHAENV_APTLIST | colortab) ||
	    ece "Warn:Empty Koha-apt list:" "$KOHASETUP_KOHAENV_APTLIST" 
    # apt-keys
    #APT_KEYS=`sudo apt-key list | grep -B1 -A2 'koha-community'`
    #[[ -n "$APT_KEYS" ]] &&
    #	(ecd "Koha-related apt-keys:" && echo $APT_KEYS | colortab) ||
    #	    ece "Warn:" "No Koha-related apt-keys."
    ecd "Koha-related apt-keys:" && \
    	sudo apt-key list | grep -B1 -A2 'koha-community' | grep . | colortab

    ## 03: Show git-repo/srv-package
    sapp="status:src"
    # Koha-soure code git-repository for KohaSuomi-based koha-dev installations
    ech "Koha-source git-repository/src-archive" "$KOHASETUP_KOHAENV_GITREPO:"
    (cd $HOME/kohaclone >/dev/null 2>&1 && git status -sb -uno | colortab) ||
	ece "Warn:" "Koha-source has not been git-cloned!"

    ## 04: Show all missing/upgradbale Perl-modules (as per "koha_perl_deps.pl")
    local sapp="status:deps"
    ecd "All missing/upgradable Perl-modules:"
    #PERLMODS=`$HOME/kohaclone/koha_perl_deps.pl -m -u -b | awk '{print $1}' | paste -s -d" " -`
    #echo "$PERLMODS" | colortab
    $HOME/kohaclone/koha_perl_deps.pl -m -u -c | colortab

    return $rc
}


#####################################################################
## setup_00:
# Documentation used for these Koha-installation instructions:
# Source: https://github.com/KohaSuomi/kohasuomi/blob/kohasuomi3.16/INSTALL.ubuntu
# Source: https://wiki.koha-community.org/wiki/Koha_on_ubuntu_-_packages
# Source: https://wiki.koha-community.org/wiki/Koha_on_ubuntu_-_packages#Appendix_B:_Troubleshooting
# $1 = (no args)
#####################################################################
function kohaenv-setup_00 {
    rc=0

    ## Head:
    local sapp="${sapp}:docs"
    ecd "Setup 00:" "KOHA INSTALL, SETUP and CONFIG"
    ecd "[KohaSuomi-3.16 as LXC to Ubuntu Server LTS (14.04/16.04)]"

    ## Settings:

    ## Do it:
    ecd "Show:" "INSTALLATION GUIDES/DOCS:"
    ecd "- #1:" "https://github.com/KohaSuomi/kohasuomi/blob/kohasuomi3.16/INSTALL.ubuntu"
    ecd "- #2:" "https://wiki.koha-community.org/wiki/Koha_on_ubuntu_-_packages"
    ecd "- #3:" "https://wiki.koha-community.org/wiki/Version_Control_Using_Git"
    ecd "- #4:" "https://wiki.koha-community.org/wiki/Koha_on_ubuntu_-_packages#Appendix_B:_Troubleshooting"
    
    return $rc
}

##############################################################################
## setup_01:
# "ADD KOHA COMMUNITY REPOSITORY"
###############################################################################
function kohaenv-setup_01 {
    local sapp="${sapp}:repo" && rc=0
    echo && ecd "Setup 01:" \
		"ADD KOHA COMMUNITY REPOSITORY"

    ## Settings
    KOHASETUP_KOHAENEV_APTLIST="${KOHASETUP_KOHAENEV_APTLIST:-/etc/apt/sources.list.d/koha.list}"

    ## Koha-community repo and repo-release
    KOHASETUP_KOHAENV_REPO="${KOHASETUP_KOHAENV_REPO:-http://debian.koha-community.org/koha}"
    # .. one of: "(oldstable | stable | unstable) main"
    KOHASETUP_KOHAENV_RELEASE="${KOHASETUP_KOHAENV_RELEASE:-oldstable main}" 
    ## 'Stable': echo deb http://debian.koha-community.org/koha stable main
    ## 'Old stable': echo deb http://debian.koha-community.org/koha oldstable main
    ## 'Unstable': echo deb http://debian.koha-community.org/koha unstable main
    #   --> tried for 'kldev_travel1' (2016-07): did not work!!

    ## Do it

    # If repo for Koha has not been defined, set it and add the APT-keys
    if [[ ! -f $KOHASETUP_KOHAENV_APTLIST ]]; then
	ech "Setup: Add Koha-community-repo:" \
	    "$KOHASETUP_KOHAENV_REPO $KOHASETUP_KOHAENV_RELEASE" 
	echo deb $KOHASETUP_KOHAENV_REPO $KOHASETUP_KOHAENV_RELEASE | \
	    sudo tee $KOHASETUP_KOHAENV_APTLIST

	# Add the APT trusted key 
	wget -O- $KOHASETUP_KOHAENV_REPO/gpg.asc | sudo apt-key add -
    fi

    # Show what we have
    ech "Contents of" "$KOHASETUP_KOHAENV_APTLIST:" &&
	[[ -f $KOHASETUP_KOHAENV_APTLIST ]] &&
	(cat $KOHASETUP_KOHAENV_APTLIST | colortab) || echo "(does not exist)"

    ecd "Koha-related apt-keys:" && \
	sudo apt-key list | grep -C 2 'koha-community' | colortab

    return $rc
}

##############################################################################
## setup_02:
# "UPDATE UBUNTU"
##############################################################################
function kohaenv-setup_02 {
    local sapp="${sapp}:ubuntu" && rc=0;
    echo && ecd "Setup 02:" \
		"UPDATE UBUNTU PACKAGE ENVIRONMENT (apt-get)"

    ## Settings

    ## Do it:

    # apt.get: update/upgrade/clean

    ecd "Updating.."
    sudo apt-get -q -y update | colortab
    [[ "$?" -ne 0 ]] &&
	err="Update/upgrade (apt-get) @ Ubuntu failed" &&
	rc=21 && return $rc;

    ecd "Upgrading.."
    #sudo apt-get --print-uris --show-progress -y upgrade | colortab
    sudo apt-get --show-progress -y upgrade | colortab
    [[ "$?" -ne 0 ]] &&
	err="Update/upgrade (apt-get) @ Ubuntu failed" &&
	rc=22 && return $rc;

    ecd "Cleaning and autoremoving.. (just a dry-run)"
    sudo apt-get clean && sudo apt-get --dry-run autoremove | colortab
    [[ "$?" -ne 0 ]] &&
	err="Clean/autoremove (apt-get) @ Ubuntu failed" &&
	rc=23;

    return $rc
}

##############################################################################
## setup_03:
# "DOWNLOAD THE LATEST STABLE KOHA (Git) SOURCE RELEASE"
# Source (GIT/SSL-CA problems):
# - http://askubuntu.com/questions/636962/permission-issues-with-etc-ssl-certs-ca-certificates-crt
###############################################################################
function kohaenv-setup_03 {
    local sapp="${sapp}:download" && rc=0
    echo && ecd "Setup 03:" \
		"DOWNLOAD LATEST STABLE KOHA (Git/KohaSuomi) SOURCE RELEASE"

    ## Settings
    KOHASETUP_KOHAENV_GITREPO="${KOHASETUP_KOHAENV_GITREPO:-https://github.com/KohaSuomi/kohasuomi.git}"
    #KOHASETUP_KOHENV_GITREPO="git://git.koha-community.org/koha.git"

    ## Check/setup/installl some needed git-related tools/paclages
    if [[ ! `which git` ]]; then 
	err="Something wrong with 'git' client setup ('$?')" &&
	    rc=31 && return $rc
    fi

    ## Clone the KohaSuomi repository to 'kohaclone', if not there already 
    [[ -d "$HOME/kohaclone" ]] && cd $HOME/kohaclone &&
	git status | colortab | grep -qc "kohasuomi3.16"
    if (( ! $? )); then
	ecd "Warn:" "Git-repository for 'kohasuomi3.16 already exists"
    else
	git clone "$VERBOSE" --progress "$KOHASETUP_KOHAENV_GITREPO" kohaclone | colortab
	(( $? )) &&
	    err="Cloning of '$KOHASETUP_KOHAENV_GITREPO' to './kohaclone' failed" &&
	    rc=32 && return $rc
    fi
    
    ## Setup (user-wide) .gitignore
    git config --global core.excludesfile "$HOME/.gitignore_global"
    [[ $(grep "*~" "$HOME/.gitignore_global") ]] || echo "*~" | tee -a "$HOME/.gitignore_global"
    [[ $(grep "DEADJOE" "$HOME/.gitignore_global") ]] || echo "DEADJOE" | tee -a "$HOME/.gitignore_global"

    ## Go to cloned Koha-dir and do some git-work
    (cd $HOME/kohaclone &&
	    # Get the status of the repo
	    git status | colortab &&
	    
	    # Checkout a branch for us (use -B if branch already exists)
	    (git checkout -B lappi_dev origin 2>&1 | colortab) &&

	    # Show the branch info
	    git branch -v | colortab
    )

    return $rc
}

##############################################################################
## setup_04:
# "CHECK/INSTALL ALL DEPENDENCIES"
# - 04.A: Dependencies from the repository  (koha-deps and koha-perldeps)
# - 04.B: Check for missing Perl-dependencies
# [Search missing Perl-modules from here first, then install using 'cpan'..]
# - Source: http://deb.perl.it/
# - Source: http://deb.perl.it/ubuntu/cpan-deb/
###############################################################################
function kohaenv-setup_04 {
    local sapp="${sapp}:deps" && rc=0
    echo && ecd "Setup 04:" "CHECK AND RESOLVE ALL MISSING DEPENDENCIES"

    ## Settings

    ## Install deps: 'koha-deps' and 'koha-perldeps' (and 'make')
    ecd "Install:" "Retrieve/install 'koha-deps' and koha-perldeps' pckgs.."
    sudo apt-get -y install koha-deps koha-perldeps make | colortab

    ## Check the dependencies

    # Show colored missing/upgradble modules
    ecd "Resolve:" "missing/upgradable Perl-module dependencies.." &&
	$HOME/kohaclone/koha_perl_deps.pl -m -u -c | tee -a $logdir/$app-dependencies.log;
    PERLMODS=`$HOME/kohaclone/koha_perl_deps.pl -m -u -b | sort | awk '{print $1}' | paste -s -d" " -`
    # Show all missing/upgradable modules (one-by-one)
    CPANS_MISC=($PERLMODS)
    for m in "${CPANS_MISC[@]}"; do
	ech "Missing/upgradable Perl-module:" "$m"
    done

    exit 123

    ## Manual (ubuntu/perl) dependency resolution:
    # [Source: http://deb.perl.it/]
    # Try to install missing packages:
    # - 1a. first as Ubuntu packages
    # - 1b add required missing/upgradable pckgs to KOHASETUP_KOHAENV_PCKS_NEED
    # - 1b add missing pckgs to KOHASETUP_KOHAENV_PCKGS_MISS
    # - 1c add upgradable pckgs to KOHASETUP_KOHAENV_PCKS_UPGR
    # or
    # - 2a. install missing perl-modules from cpan
    # - 2b. add packages/modules to KOHASETUP_KOHAENV_CPAN
    # and
    # - 3. run "kohasetup -c koha" until all required dependecies have been resolved

    ## Let the user decide what to do with the missing depepencies
    REPORTED_MODS=`$HOME/kohaclone/koha_perl_deps.pl -m -u -c | grep "Total modules" | awk '{print $4}'`
    choice="yes"
    if [[ -n "$REPORTED_MODS" && "$REPORTED_MODS" -ne 0 ]]; then
	read -p "?? $app [config] Stop config-script, resolve dependencies manually (y/n)? " choice
	case "$choice" in
	    y|Y|yes ) ecd "'yes' ==> Ok, come back when happy, bye for now!"; return $rc;;
	    n|N|no  ) ecd "'no' ==> continuing with koha-setup and config..";;
	    *       ) ece "Warn:" "Invalid response"; return 2;;
	esac
    fi

    ## Build the vars that contain Ubuntu packages of Perl-related module dependencies
    #echo $(cat "${KOHASETUP_TOOLS}/setup-koha.env_packages_needed")

    KOHASETUP_KOHAENV_PCKGS_NEED=$(cat "${KOHASETUP_TOOLS}/setup-koha.env_packages_needed" | \
					  grep -v '^#' | tr "\n" " ")
    KOHASETUP_KOHAENV_PCKGS_MISS=$(cat "${KOHASETUP_TOOLS}/setup-koha.env_packages_missing" | \
					  grep -v '^#' | tr "\n" " ")
    
    #KOHASETUP_KOHAENV_PCKGS_XTRA=$(cat "${KOHASETUP_TOOLS}/setup-koha.env_packages_extra" | \
    #					  grep -v '^#' | tr "\n" " ")

    # Collect pckgs-dependencies..
    KOHASETUP_KOHAENV_PCKGS_DEPS="${KOHASETUP_KOHAENV_PCKGS_NEED}"
    KOHASETUP_KOHAENV_PCKGS_DEPS+=" ${KOHASETUP_KOHAENV_PCKGS_MISS}"
    #KOHASETUP_KOHAENV_PCKGS_DEPS+=" ${KOHASETUP_KOHAENV_PCKGS_XTRA}"
    
    # Show them by logging output to log-dir/$app-dependencies.log, too
    echo &&
	ech "All Koha-related Ubuntu packages to check/install:\n" \
	    "$KOHASETUP_KOHAENV_PCKGS_DEPS" | tee -a $logdir/$app-dependencies.log
    # Try to resolve above dependencies installing these packages
    _pckgs-install $KOHASETUP_KOHAENV_PCKGS_DEPS; rc=$?

    ## Build the vars that contain Koha/Perl-related CPAN-dependencies
    #echo $(cat "${KOHASETUP_TOOLS}/setup-koha.env_cpans_needed")
    KOHASETUP_KOHAENV_CPANS_NEED=$(cat "${KOHASETUP_TOOLS}/setup-koha.env_cpans_needed" | \
					  sort | grep -v '^#' | tr "\n" " ")
    KOHASETUP_KOHAENV_CPANS_MISS=$(cat "${KOHASETUP_TOOLS}/setup-koha.env_cpans_missing" | \
					  sort | grep -v '^#' | tr "\n" " ")
    #KOHASETUP_KOHAENV_CPANS_XTRA=$(cat "${KOHASETUP_TOOLS}/setup-koha.env_cpans_extra" | \
    #					  sort | grep -v '^#' | tr "\n" " ")
    # Collect CPAN-dependencies..
    KOHASETUP_KOHAENV_CPANS_DEPS="${KOHASETUP_KOHAENV_CPANS_NEED}"
    KOHASETUP_KOHAENV_CPANS_DEPS+=" ${KOHASETUP_KOHAENV_CPANS_MISS}"
    KOHASETUP_KOHAENV_CPANS_DEPS+=" ${KOHASETUP_KOHAENV_CPANS_XTRA}"
    # Show them by logging ouput to logdir/$app-dependencies.log, too
    echo &&
	ech "Koha-related Perl-modules to check/install (if not already):\n" \
	"$KOHASETUP_KOHAENV_CPANS_DEPS" | tee -a $logdir/$app-dependencies.log
    # Install with CPAN the Perl-dependencies for which no Ubuntu pckg exist
    _cpanm-install $KOHASETUP_KOHAENV_CPANS_DEPS; rc=$?

    (cd $HOME/kohaclone && echo &&
	    # Show colored the still required and missing/upgradble modules
	    ecd "Manually resolve:" "required missing/upgradable Perl-depencies.." &&
	    ./koha_perl_deps.pl -r -m -u -c | \
		tee -a $logdir/$app-dependencies.log;

     PERLMODS=`./koha_perl_deps.pl -r -m -u -b | awk '{print $1}' | paste -s -d" " -`
     # Show all requires missing/upgradable modules (one-by-one)
     CPANS_NEED=($PERLMODS)
     for m in "${CPANS_NEED[@]}"; do
	 ece "Warn: required missing/upgradable Perl-module:" "$m"
     done
    )

    return $rc
}


##############################################################################
## setup_05:
# "ESTABLISH DATABASE CONNECTIVITY (RESTART SERVER, CREATE DB/USERS if needed)"
###############################################################################
function kohaenv-setup_05 {
    local sapp="${sapp}:kohadb" && rc=0
    echo &&
	ecd "Setup 05:" \
	    "ESTABLISH DATABASE CONNECTIVITY (RESTART SERVER, CREATE DB etc.)"

    ## Settings
    # Need the database-stuff..
    source $KOHASETUP_TOOLS/setup-mdb.env
    [[ "$?" -ne 0 ]] &&
	ece "Warn:" "Configuration/environment 'mdb.env' not found!"

    mdbsrv="${KOHASETUP_KOHAENEV_DBSRV:-mysql}"
    dbhost="${KOHASETUP_KOHAENV_DBHOST:-localhost}"
    dbport="${KOHASETUP_KOHAENV_DBPORT:-3306}"
    dbroot="${KOHASETUP_KOHAENV_DBROOT:-fakeroot}"
    dbpass="${KOHASETUP_KOHAENV_DBPASS:-fakerootpass}"

    kohadb="${KOHASETUP_KOHAENV_KOHADB:-kohadata}"
    kohauser="${KOHASETUP_KOHAENV_KOHAUSER:-fakekoha}"
    kohapass="${KOHASETUP_KOHAENV_KOHAPASS:-fakekohapass}"

    # Basic info abt the db-server 
    #mdbenv_srvinfo
    # Ping it
    #mdbenv_srvping
    # Show extended status of database
    mdbenv-status

    app="setup-koha"
    # Create kohadb and enable koha-user access
    ech "Database enable for:" "'$kohauser'@'$dbhost':$dbport/$kohadb"
    [[ "localhost" == "$dbhost" ]] && at="localhost" || at="%"
    mysql -u root <<EOF
CREATE DATABASE IF NOT EXISTS ${kohadb};
-- SHOW DATABASES;

-- If needed, first revoke user privs and drop user
-- REVOKE ALL PRIVILEGES ON ${kohadb}.* FROM '${kohauser}'@'${at}';
-- DROP USER '${kohauser}'@'${at}';

-- Create user and grant privs
CREATE user '${kohauser}'@'${at}' IDENTIFIED by '${kohapass}';
GRANT ALL PRIVILEGES ON ${kohadb}.* TO '${kohauser}'@'${at}' IDENTIFIED BY '${kohapass}';
FLUSH PRIVILEGES;

-- Show the user table
-- SELECT User,Host FROM mysql.user;

quit
EOF
    rc="$?"
    if [[ "$rc" -eq 0 ]]; then
	ech "Database altered for:" \
	    "'$kohauser'@'$dbhost':$dbport/$kohadb using [$mdbsrv-server] [ok]"
    else
	ece "Error in (re-)enabling '$kohauser' to '$kohadb' as:" \
	    "$dbroot@$dbhost:$dbport [$mdbsrv-server] [fail]"
    fi

    return $rc
}


##############################################################################
## setup_06:
# "CONFIGURE KOHA"
###############################################################################
function kohaenv-setup_06 {
    local sapp="${sapp}:configure" && rc=0
    echo && ecd "Setup 06:" \
		"CONFIGURE KOHA"

    ## Settings

    
    return $rc
}


##############################################################################
## Overview of the steps needed to install and setup Koha in LXC-env
# 1. Check, install and setup the environment
#  A. srvenv: kernel, localization, LXC (name/type), partitions/storage, network..
#  B. devenv: Git and othe relevenat dev env tools
#  C. mdbenv: What database and how to connect to database?
#  - KOHASETUP_KOHAENV_DBCONNECTION = koha@locahost:3306 
#  D: Koha-specifc server and application installation, setup and configuration
###############################################################################
#
function kohaenv-setup {
    rc=0

    kohaenv-setup_01; rc=$?
    kohaenv-setup_02; rc=$?
    kohaenv-setup_03; rc=$?
    kohaenv-setup_04; rc=$?
    kohaenv-setup_05; rc=$?
    kohaenv-setup_06; rc=$?

    return $rc
}

